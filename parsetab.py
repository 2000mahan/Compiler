
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftWHILEFORONleftINleftIFleftELSEleftELSEIFleftWHEREleftPRINTleftRETURNrightASSIGNleftORleftANDleftNOTleftGTLTNEEQLEGEleftMODleftSUMSUBleftMULDIVleftLCBRCBleftLSBRSBleftLRBRRBleftINTEGERNUMBERleftFLOATNUMBERleftTRUEFALSEleftINTEGERleftFLOATleftBOOLEANleftIDleftFUNCTIONleftMAINleftSEMICOLONCOLONleftERRORAND ASSIGN BOOLEAN COLON COMMA DIV ELSE ELSEIF EQ ERROR FALSE FLOAT FLOATNUMBER FOR FUNCTION GE GT ID IF IN INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT ON OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE WHERE WHILEprogram : declist MAIN LRB RRB block\n                    | MAIN LRB RRB blockdeclist : dec\n                   | declist decdec : vardec\n               | funcdectype : INTEGER\n                | FLOAT\n                | BOOLEANiddec : ID\n                 | ID LSB exp RSB\n                 | ID ASSIGN expidlist : iddec\n                  | idlist COMMA iddecvardec : idlist COLON type SEMICOLONfuncdec : FUNCTION ID LRB paramdecs RRB COLON type block\n                   | FUNCTION ID LRB paramdecs RRB blockparamdecs : paramdecslist\n                     | emptyparamdecslist : paramdec\n                         | paramdecslist COMMA paramdec paramdec : ID COLON type\n                     | ID LSB RSB COLON typeblock : LCB stmtlist RCBstmtlist : stmtlist stmt\n                    | emptylvalue : ID\n                  | ID LSB exp RSBcase : WHERE const COLON stmtlistcases : cases case\n                | emptystmt : RETURN exp SEMICOLON\n                | exp SEMICOLON\n                | block\n                | vardec\n                | WHILE LRB exp RRB stmt\n                | ON LRB exp RRB LCB cases RCB SEMICOLON\n                | FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt\n                | FOR LRB ID IN ID RRB stmt\n                | IF LRB exp RRB stmt elseiflist\n                | IF LRB exp RRB stmt elseiflist ELSE stmt\n                | PRINT LRB ID RRBelseiflist : elseiflist ELSEIF LRB exp RRB stmt\n                      | emptyrelopexp : exp GT exp\n                    | exp LT exp\n                    | exp NE exp\n                    | exp EQ exp\n                    | exp LE exp\n                    | exp GE exp\n                    | relopexp relop expexp : lvalue ASSIGN exp\n               | exp AND exp\n               | exp OR exp\n               | exp SUM exp\n               | exp SUB exp\n               | exp MUL exp\n               | exp DIV exp\n               | exp MOD exp\n               | relopexp\n               | const\n               | lvalue\n               | ID LRB explist RRB\n               | LRB exp RRB\n               | ID LRB RRB\n               | SUB exp\n               | NOT expconst : INTEGERNUMBER\n                 | FLOATNUMBER\n                 | TRUE\n                 | FALSErelop : GT\n                 | LT\n                 | NE\n                 | EQ\n                 | LE\n                 | GEexplist : exp\n                   | explist COMMA expempty :'
    
_lr_action_items = {'MAIN':([0,2,4,5,6,12,43,103,118,143,],[3,11,-3,-5,-6,-4,-15,-24,-17,-16,]),'FUNCTION':([0,2,4,5,6,12,43,103,118,143,],[8,8,-3,-5,-6,-4,-15,-24,-17,-16,]),'ID':([0,2,4,5,6,8,12,15,17,18,26,30,33,34,42,43,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,77,78,82,103,104,105,107,108,118,121,124,125,126,127,128,129,130,134,143,144,146,147,149,150,151,155,158,159,160,161,166,167,169,171,172,173,174,175,177,178,179,],[9,9,-3,-5,-6,16,-4,9,27,27,44,27,27,27,-80,-15,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-72,-73,-74,-75,-76,-77,112,-26,44,-24,-25,27,-34,-35,-17,27,-33,27,27,138,27,27,141,-32,-16,112,27,154,112,-42,-36,-80,27,112,-40,-44,-39,112,-37,112,-41,27,-80,-38,112,112,-43,]),'$end':([1,41,76,103,],[0,-2,-1,-24,]),'LRB':([3,11,16,17,18,27,30,33,34,42,43,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,77,78,103,104,105,107,108,109,110,111,112,113,114,121,124,125,126,127,128,129,134,138,144,146,149,150,151,155,158,159,160,161,166,167,168,169,171,172,173,174,175,177,178,179,],[13,19,26,33,33,49,33,33,33,-80,-15,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-72,-73,-74,-75,-76,-77,33,-26,-24,-25,33,-34,-35,125,126,127,49,129,130,33,-33,33,33,33,33,33,-32,49,33,33,33,-42,-36,-80,33,33,-40,-44,-39,33,173,-37,33,-41,33,-80,-38,33,33,-43,]),'COLON':([7,9,10,25,27,29,31,32,35,36,37,38,39,44,51,66,75,81,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,112,116,120,122,148,170,],[14,-10,-13,-14,-27,-62,-60,-61,-68,-69,-70,-71,-12,79,-11,-66,-67,117,-65,-53,-54,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,-52,-51,-64,-10,131,-63,-28,-11,174,]),'COMMA':([7,9,10,22,23,24,25,27,29,31,32,35,36,37,38,39,46,48,51,66,75,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,112,115,119,120,122,133,142,148,],[15,-10,-13,-7,-8,-9,-14,-27,-62,-60,-61,-68,-69,-70,-71,-12,82,-20,-11,-66,-67,121,-65,-78,-53,-54,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,-52,-51,-64,-10,-22,-21,-63,-28,-79,-23,-11,]),'LSB':([9,27,44,112,138,],[17,50,80,128,50,]),'ASSIGN':([9,27,29,112,122,138,148,],[18,-27,65,-27,-28,-27,-28,]),'RRB':([13,19,22,23,24,26,27,29,31,32,35,36,37,38,45,46,47,48,49,66,74,75,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,115,119,120,122,133,135,136,140,141,142,154,165,176,],[20,40,-7,-8,-9,-80,-27,-62,-60,-61,-68,-69,-70,-71,81,-18,-19,-20,84,-66,102,-67,120,-65,-78,-53,-54,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,-52,-51,-64,-22,-21,-63,-28,-79,144,145,149,150,-23,159,171,178,]),'INTEGER':([14,79,117,131,],[22,22,22,22,]),'FLOAT':([14,79,117,131,],[23,23,23,23,]),'BOOLEAN':([14,79,117,131,],[24,24,24,24,]),'SUB':([17,18,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,120,121,122,123,124,125,126,127,128,129,133,134,135,136,137,138,139,140,144,146,148,149,150,151,153,155,158,159,160,161,165,166,167,169,171,172,173,174,175,176,177,178,179,],[30,30,-27,55,-62,30,-60,-61,30,30,-68,-69,-70,-71,55,-80,-15,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-66,30,-72,-73,-74,-75,-76,-77,55,55,30,-26,-65,55,55,55,55,-55,-56,-57,-58,55,55,55,55,55,55,55,55,55,-64,-24,-25,30,55,-34,-35,-27,-63,30,-28,55,-33,30,30,30,30,30,55,-32,55,55,55,-27,55,55,30,30,-28,30,-42,-36,55,-80,30,30,-40,-44,55,-39,30,-37,30,-41,30,-80,-38,55,30,30,-43,]),'NOT':([17,18,30,33,34,42,43,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,77,78,103,104,105,107,108,121,124,125,126,127,128,129,134,144,146,149,150,151,155,158,159,160,161,166,167,169,171,172,173,174,175,177,178,179,],[34,34,34,34,34,-80,-15,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-72,-73,-74,-75,-76,-77,34,-26,-24,-25,34,-34,-35,34,-33,34,34,34,34,34,-32,34,34,34,-42,-36,-80,34,34,-40,-44,-39,34,-37,34,-41,34,-80,-38,34,34,-43,]),'INTEGERNUMBER':([17,18,30,33,34,42,43,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,77,78,103,104,105,107,108,121,124,125,126,127,128,129,134,144,146,149,150,151,155,158,159,160,161,164,166,167,169,171,172,173,174,175,177,178,179,],[35,35,35,35,35,-80,-15,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-72,-73,-74,-75,-76,-77,35,-26,-24,-25,35,-34,-35,35,-33,35,35,35,35,35,-32,35,35,35,-42,-36,-80,35,35,-40,-44,35,-39,35,-37,35,-41,35,-80,-38,35,35,-43,]),'FLOATNUMBER':([17,18,30,33,34,42,43,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,77,78,103,104,105,107,108,121,124,125,126,127,128,129,134,144,146,149,150,151,155,158,159,160,161,164,166,167,169,171,172,173,174,175,177,178,179,],[36,36,36,36,36,-80,-15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-72,-73,-74,-75,-76,-77,36,-26,-24,-25,36,-34,-35,36,-33,36,36,36,36,36,-32,36,36,36,-42,-36,-80,36,36,-40,-44,36,-39,36,-37,36,-41,36,-80,-38,36,36,-43,]),'TRUE':([17,18,30,33,34,42,43,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,77,78,103,104,105,107,108,121,124,125,126,127,128,129,134,144,146,149,150,151,155,158,159,160,161,164,166,167,169,171,172,173,174,175,177,178,179,],[37,37,37,37,37,-80,-15,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-72,-73,-74,-75,-76,-77,37,-26,-24,-25,37,-34,-35,37,-33,37,37,37,37,37,-32,37,37,37,-42,-36,-80,37,37,-40,-44,37,-39,37,-37,37,-41,37,-80,-38,37,37,-43,]),'FALSE':([17,18,30,33,34,42,43,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,77,78,103,104,105,107,108,121,124,125,126,127,128,129,134,144,146,149,150,151,155,158,159,160,161,164,166,167,169,171,172,173,174,175,177,178,179,],[38,38,38,38,38,-80,-15,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-72,-73,-74,-75,-76,-77,38,-26,-24,-25,38,-34,-35,38,-33,38,38,38,38,38,-32,38,38,38,-42,-36,-80,38,38,-40,-44,38,-39,38,-37,38,-41,38,-80,-38,38,38,-43,]),'LCB':([20,22,23,24,40,42,43,77,78,81,103,104,107,108,124,132,134,144,145,149,150,151,155,159,160,161,166,167,169,171,172,174,175,177,178,179,],[42,-7,-8,-9,42,-80,-15,42,-26,42,-24,-25,-34,-35,-33,42,-32,42,152,42,-42,-36,-80,42,-40,-44,-39,42,-37,42,-41,-80,-38,42,42,-43,]),'SEMICOLON':([21,22,23,24,27,29,31,32,35,36,37,38,66,75,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,137,138,148,153,162,],[43,-7,-8,-9,-27,-62,-60,-61,-68,-69,-70,-71,-66,-67,-65,-53,-54,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,-52,-51,-64,124,-27,-63,-28,134,146,-27,-28,158,169,]),'RSB':([27,28,29,31,32,35,36,37,38,66,75,80,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,120,122,139,],[-27,51,-62,-60,-61,-68,-69,-70,-71,-66,-67,116,-65,122,-53,-54,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,-52,-51,-64,-63,-28,148,]),'AND':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,52,-62,-60,-61,-68,-69,-70,-71,52,-66,52,-67,-65,52,52,-53,52,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,52,52,-64,52,-27,-63,-28,52,52,52,52,52,-27,52,52,-28,52,52,52,]),'OR':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,53,-62,-60,-61,-68,-69,-70,-71,53,-66,53,-67,-65,53,53,-53,-54,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,53,53,-64,53,-27,-63,-28,53,53,53,53,53,-27,53,53,-28,53,53,53,]),'SUM':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,54,-62,-60,-61,-68,-69,-70,-71,54,-66,54,54,-65,54,54,54,54,-55,-56,-57,-58,54,54,54,54,54,54,54,54,54,-64,54,-27,-63,-28,54,54,54,54,54,-27,54,54,-28,54,54,54,]),'MUL':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,56,-62,-60,-61,-68,-69,-70,-71,56,56,56,56,-65,56,56,56,56,56,56,-57,-58,56,56,56,56,56,56,56,56,56,-64,56,-27,-63,-28,56,56,56,56,56,-27,56,56,-28,56,56,56,]),'DIV':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,57,-62,-60,-61,-68,-69,-70,-71,57,57,57,57,-65,57,57,57,57,57,57,-57,-58,57,57,57,57,57,57,57,57,57,-64,57,-27,-63,-28,57,57,57,57,57,-27,57,57,-28,57,57,57,]),'MOD':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,58,-62,-60,-61,-68,-69,-70,-71,58,-66,58,58,-65,58,58,58,58,-55,-56,-57,-58,-59,58,58,58,58,58,58,58,58,-64,58,-27,-63,-28,58,58,58,58,58,-27,58,58,-28,58,58,58,]),'GT':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,59,-62,68,-61,-68,-69,-70,-71,59,-66,59,59,-65,59,59,59,59,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,59,59,-64,59,-27,-63,-28,59,59,59,59,59,-27,59,59,-28,59,59,59,]),'LT':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,60,-62,69,-61,-68,-69,-70,-71,60,-66,60,60,-65,60,60,60,60,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,60,60,-64,60,-27,-63,-28,60,60,60,60,60,-27,60,60,-28,60,60,60,]),'NE':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,61,-62,70,-61,-68,-69,-70,-71,61,-66,61,61,-65,61,61,61,61,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,61,61,-64,61,-27,-63,-28,61,61,61,61,61,-27,61,61,-28,61,61,61,]),'EQ':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,62,-62,71,-61,-68,-69,-70,-71,62,-66,62,62,-65,62,62,62,62,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,62,62,-64,62,-27,-63,-28,62,62,62,62,62,-27,62,62,-28,62,62,62,]),'LE':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,63,-62,72,-61,-68,-69,-70,-71,63,-66,63,63,-65,63,63,63,63,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,63,63,-64,63,-27,-63,-28,63,63,63,63,63,-27,63,63,-28,63,63,63,]),'GE':([27,28,29,31,32,35,36,37,38,39,66,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,112,120,122,123,133,135,136,137,138,139,140,148,153,165,176,],[-27,64,-62,73,-61,-68,-69,-70,-71,64,-66,64,64,-65,64,64,64,64,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,64,64,-64,64,-27,-63,-28,64,64,64,64,64,-27,64,64,-28,64,64,64,]),'RCB':([42,43,77,78,103,104,107,108,124,134,150,151,152,155,156,157,160,161,163,166,169,172,174,175,177,179,],[-80,-15,103,-26,-24,-25,-34,-35,-33,-32,-42,-36,-80,-80,162,-31,-40,-44,-30,-39,-37,-41,-80,-38,-29,-43,]),'RETURN':([42,43,77,78,103,104,107,108,124,134,144,149,150,151,155,159,160,161,166,167,169,171,172,174,175,177,178,179,],[-80,-15,105,-26,-24,-25,-34,-35,-33,-32,105,105,-42,-36,-80,105,-40,-44,-39,105,-37,105,-41,-80,-38,105,105,-43,]),'WHILE':([42,43,77,78,103,104,107,108,124,134,144,149,150,151,155,159,160,161,166,167,169,171,172,174,175,177,178,179,],[-80,-15,109,-26,-24,-25,-34,-35,-33,-32,109,109,-42,-36,-80,109,-40,-44,-39,109,-37,109,-41,-80,-38,109,109,-43,]),'ON':([42,43,77,78,103,104,107,108,124,134,144,149,150,151,155,159,160,161,166,167,169,171,172,174,175,177,178,179,],[-80,-15,110,-26,-24,-25,-34,-35,-33,-32,110,110,-42,-36,-80,110,-40,-44,-39,110,-37,110,-41,-80,-38,110,110,-43,]),'FOR':([42,43,77,78,103,104,107,108,124,134,144,149,150,151,155,159,160,161,166,167,169,171,172,174,175,177,178,179,],[-80,-15,111,-26,-24,-25,-34,-35,-33,-32,111,111,-42,-36,-80,111,-40,-44,-39,111,-37,111,-41,-80,-38,111,111,-43,]),'IF':([42,43,77,78,103,104,107,108,124,134,144,149,150,151,155,159,160,161,166,167,169,171,172,174,175,177,178,179,],[-80,-15,113,-26,-24,-25,-34,-35,-33,-32,113,113,-42,-36,-80,113,-40,-44,-39,113,-37,113,-41,-80,-38,113,113,-43,]),'PRINT':([42,43,77,78,103,104,107,108,124,134,144,149,150,151,155,159,160,161,166,167,169,171,172,174,175,177,178,179,],[-80,-15,114,-26,-24,-25,-34,-35,-33,-32,114,114,-42,-36,-80,114,-40,-44,-39,114,-37,114,-41,-80,-38,114,114,-43,]),'ELSE':([43,103,107,108,124,134,150,151,155,160,161,166,169,172,175,179,],[-15,-24,-34,-35,-33,-32,-42,-36,-80,-40,-44,-39,-37,-41,-38,-43,]),'ELSEIF':([43,103,107,108,124,134,150,151,155,160,161,166,169,172,175,179,],[-15,-24,-34,-35,-33,-32,-42,-36,-80,-40,-44,-39,-37,-41,-38,-43,]),'WHERE':([43,78,103,104,107,108,124,134,150,151,152,155,156,157,160,161,163,166,169,172,174,175,177,179,],[-15,-26,-24,-25,-34,-35,-33,-32,-42,-36,-80,-80,164,-31,-40,-44,-30,-39,-37,-41,-80,-38,-29,-43,]),'IN':([138,],[147,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([0,2,],[4,12,]),'vardec':([0,2,77,144,149,159,167,171,177,178,],[5,5,108,108,108,108,108,108,108,108,]),'funcdec':([0,2,],[6,6,]),'idlist':([0,2,77,144,149,159,167,171,177,178,],[7,7,7,7,7,7,7,7,7,7,]),'iddec':([0,2,15,77,144,149,159,167,171,177,178,],[10,10,25,10,10,10,10,10,10,10,10,]),'type':([14,79,117,131,],[21,115,132,142,]),'exp':([17,18,30,33,34,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,77,105,121,125,126,127,128,129,144,146,149,158,159,167,171,173,177,178,],[28,39,66,74,75,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,123,133,135,136,137,139,140,106,153,106,165,106,106,106,176,106,106,]),'lvalue':([17,18,30,33,34,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,77,105,121,125,126,127,128,129,144,146,149,158,159,167,171,173,177,178,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'relopexp':([17,18,30,33,34,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,77,105,121,125,126,127,128,129,144,146,149,158,159,167,171,173,177,178,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'const':([17,18,30,33,34,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,77,105,121,125,126,127,128,129,144,146,149,158,159,164,167,171,173,177,178,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,170,32,32,32,32,32,]),'block':([20,40,77,81,132,144,149,159,167,171,177,178,],[41,76,107,118,143,107,107,107,107,107,107,107,]),'paramdecs':([26,],[45,]),'paramdecslist':([26,],[46,]),'empty':([26,42,152,155,174,],[47,78,157,161,78,]),'paramdec':([26,82,],[48,119,]),'relop':([31,],[67,]),'stmtlist':([42,174,],[77,177,]),'explist':([49,],[83,]),'stmt':([77,144,149,159,167,171,177,178,],[104,151,155,166,172,175,104,179,]),'cases':([152,],[156,]),'elseiflist':([155,],[160,]),'case':([156,],[163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parser.py',65),
  ('program -> MAIN LRB RRB block','program',4,'p_program','parser.py',66),
  ('declist -> dec','declist',1,'p_declist','parser.py',70),
  ('declist -> declist dec','declist',2,'p_declist','parser.py',71),
  ('dec -> vardec','dec',1,'p_dec','parser.py',75),
  ('dec -> funcdec','dec',1,'p_dec','parser.py',76),
  ('type -> INTEGER','type',1,'p_type','parser.py',81),
  ('type -> FLOAT','type',1,'p_type','parser.py',82),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',83),
  ('iddec -> ID','iddec',1,'p_iddec','parser.py',87),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec','parser.py',88),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec','parser.py',89),
  ('idlist -> iddec','idlist',1,'p_idlist','parser.py',93),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist','parser.py',94),
  ('vardec -> idlist COLON type SEMICOLON','vardec',4,'p_vardec','parser.py',98),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block','funcdec',8,'p_funcdec','parser.py',102),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB block','funcdec',6,'p_funcdec','parser.py',103),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs','parser.py',107),
  ('paramdecs -> empty','paramdecs',1,'p_paramdecs','parser.py',108),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist','parser.py',112),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist','parser.py',113),
  ('paramdec -> ID COLON type','paramdec',3,'p_paramdec','parser.py',117),
  ('paramdec -> ID LSB RSB COLON type','paramdec',5,'p_paramdec','parser.py',118),
  ('block -> LCB stmtlist RCB','block',3,'p_block','parser.py',122),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist','parser.py',126),
  ('stmtlist -> empty','stmtlist',1,'p_stmtlist','parser.py',127),
  ('lvalue -> ID','lvalue',1,'p_lvalue','parser.py',131),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue','parser.py',132),
  ('case -> WHERE const COLON stmtlist','case',4,'p_case','parser.py',136),
  ('cases -> cases case','cases',2,'p_cases','parser.py',140),
  ('cases -> empty','cases',1,'p_cases','parser.py',141),
  ('stmt -> RETURN exp SEMICOLON','stmt',3,'p_stmt','parser.py',146),
  ('stmt -> exp SEMICOLON','stmt',2,'p_stmt','parser.py',147),
  ('stmt -> block','stmt',1,'p_stmt','parser.py',148),
  ('stmt -> vardec','stmt',1,'p_stmt','parser.py',149),
  ('stmt -> WHILE LRB exp RRB stmt','stmt',5,'p_stmt','parser.py',150),
  ('stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON','stmt',8,'p_stmt','parser.py',151),
  ('stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt','stmt',9,'p_stmt','parser.py',152),
  ('stmt -> FOR LRB ID IN ID RRB stmt','stmt',7,'p_stmt','parser.py',153),
  ('stmt -> IF LRB exp RRB stmt elseiflist','stmt',6,'p_stmt','parser.py',154),
  ('stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt','stmt',8,'p_stmt','parser.py',155),
  ('stmt -> PRINT LRB ID RRB','stmt',4,'p_stmt','parser.py',156),
  ('elseiflist -> elseiflist ELSEIF LRB exp RRB stmt','elseiflist',6,'p_elseiflist','parser.py',161),
  ('elseiflist -> empty','elseiflist',1,'p_elseiflist','parser.py',162),
  ('relopexp -> exp GT exp','relopexp',3,'p_relopexp','parser.py',167),
  ('relopexp -> exp LT exp','relopexp',3,'p_relopexp','parser.py',168),
  ('relopexp -> exp NE exp','relopexp',3,'p_relopexp','parser.py',169),
  ('relopexp -> exp EQ exp','relopexp',3,'p_relopexp','parser.py',170),
  ('relopexp -> exp LE exp','relopexp',3,'p_relopexp','parser.py',171),
  ('relopexp -> exp GE exp','relopexp',3,'p_relopexp','parser.py',172),
  ('relopexp -> relopexp relop exp','relopexp',3,'p_relopexp','parser.py',173),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp','parser.py',178),
  ('exp -> exp AND exp','exp',3,'p_exp','parser.py',179),
  ('exp -> exp OR exp','exp',3,'p_exp','parser.py',180),
  ('exp -> exp SUM exp','exp',3,'p_exp','parser.py',181),
  ('exp -> exp SUB exp','exp',3,'p_exp','parser.py',182),
  ('exp -> exp MUL exp','exp',3,'p_exp','parser.py',183),
  ('exp -> exp DIV exp','exp',3,'p_exp','parser.py',184),
  ('exp -> exp MOD exp','exp',3,'p_exp','parser.py',185),
  ('exp -> relopexp','exp',1,'p_exp','parser.py',186),
  ('exp -> const','exp',1,'p_exp','parser.py',187),
  ('exp -> lvalue','exp',1,'p_exp','parser.py',188),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp','parser.py',189),
  ('exp -> LRB exp RRB','exp',3,'p_exp','parser.py',190),
  ('exp -> ID LRB RRB','exp',3,'p_exp','parser.py',191),
  ('exp -> SUB exp','exp',2,'p_exp','parser.py',192),
  ('exp -> NOT exp','exp',2,'p_exp','parser.py',193),
  ('const -> INTEGERNUMBER','const',1,'p_const','parser.py',197),
  ('const -> FLOATNUMBER','const',1,'p_const','parser.py',198),
  ('const -> TRUE','const',1,'p_const','parser.py',199),
  ('const -> FALSE','const',1,'p_const','parser.py',200),
  ('relop -> GT','relop',1,'p_relop','parser.py',204),
  ('relop -> LT','relop',1,'p_relop','parser.py',205),
  ('relop -> NE','relop',1,'p_relop','parser.py',206),
  ('relop -> EQ','relop',1,'p_relop','parser.py',207),
  ('relop -> LE','relop',1,'p_relop','parser.py',208),
  ('relop -> GE','relop',1,'p_relop','parser.py',209),
  ('explist -> exp','explist',1,'p_explist','parser.py',213),
  ('explist -> explist COMMA exp','explist',3,'p_explist','parser.py',214),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',218),
]
