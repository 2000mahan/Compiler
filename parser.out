Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     program -> MAIN LRB RRB block
Rule 3     declist -> dec
Rule 4     declist -> declist dec
Rule 5     dec -> vardec
Rule 6     dec -> funcdec
Rule 7     type -> INTEGER
Rule 8     type -> FLOAT
Rule 9     type -> BOOLEAN
Rule 10    iddec -> ID
Rule 11    iddec -> ID LSB exp RSB
Rule 12    iddec -> ID ASSIGN exp
Rule 13    idlist -> iddec
Rule 14    idlist -> idlist COMMA iddec
Rule 15    vardec -> idlist COLON type SEMICOLON
Rule 16    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 17    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 18    paramdecs -> paramdecslist
Rule 19    paramdecs -> empty
Rule 20    paramdecslist -> paramdec
Rule 21    paramdecslist -> paramdecslist COMMA paramdec
Rule 22    paramdec -> ID COLON type
Rule 23    paramdec -> ID LSB RSB COLON type
Rule 24    block -> LCB stmtlist RCB
Rule 25    stmtlist -> stmtlist stmt
Rule 26    stmtlist -> empty
Rule 27    lvalue -> ID
Rule 28    lvalue -> ID LSB exp RSB
Rule 29    case -> WHERE const COLON stmtlist
Rule 30    cases -> cases case
Rule 31    cases -> empty
Rule 32    stmt -> RETURN exp SEMICOLON
Rule 33    stmt -> exp SEMICOLON
Rule 34    stmt -> block
Rule 35    stmt -> vardec
Rule 36    stmt -> WHILE LRB exp RRB stmt
Rule 37    stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 38    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 39    stmt -> FOR LRB ID IN ID RRB stmt
Rule 40    stmt -> IF LRB exp RRB stmt elseiflist
Rule 41    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 42    stmt -> PRINT LRB ID RRB
Rule 43    elseiflist -> elseiflist ELSEIF LRB exp RRB stmt
Rule 44    elseiflist -> empty
Rule 45    relopexp -> exp relop exp
Rule 46    relopexp -> relopexp relop exp
Rule 47    exp -> lvalue ASSIGN exp
Rule 48    exp -> exp AND exp
Rule 49    exp -> exp OR exp
Rule 50    exp -> exp SUM exp
Rule 51    exp -> exp SUB exp
Rule 52    exp -> exp MUL exp
Rule 53    exp -> exp DIV exp
Rule 54    exp -> exp MOD exp
Rule 55    exp -> relopexp
Rule 56    exp -> const
Rule 57    exp -> lvalue
Rule 58    exp -> ID LRB explist RRB
Rule 59    exp -> LRB exp RRB
Rule 60    exp -> ID LRB RRB
Rule 61    exp -> SUB exp
Rule 62    exp -> NOT exp
Rule 63    const -> INTEGERNUMBER
Rule 64    const -> FLOATNUMBER
Rule 65    const -> TRUE
Rule 66    const -> FALSE
Rule 67    relop -> GT
Rule 68    relop -> LT
Rule 69    relop -> NE
Rule 70    relop -> EQ
Rule 71    relop -> LE
Rule 72    relop -> GE
Rule 73    explist -> exp
Rule 74    explist -> explist COMMA exp
Rule 75    empty -> <empty>

Terminals, with rules where they appear

AND                  : 48
ASSIGN               : 12 47
BOOLEAN              : 9
COLON                : 15 16 22 23 29
COMMA                : 14 21 74
DIV                  : 53
ELSE                 : 41
ELSEIF               : 43
EQ                   : 70
ERROR                : 
FALSE                : 66
FLOAT                : 8
FLOATNUMBER          : 64
FOR                  : 38 39
FUNCTION             : 16 17
GE                   : 72
GT                   : 67
ID                   : 10 11 12 16 17 22 23 27 28 39 39 42 58 60
IF                   : 40 41
IN                   : 39
INTEGER              : 7
INTEGERNUMBER        : 63
LCB                  : 24 37
LE                   : 71
LRB                  : 1 2 16 17 36 37 38 39 40 41 42 43 58 59 60
LSB                  : 11 23 28
LT                   : 68
MAIN                 : 1 2
MOD                  : 54
MUL                  : 52
NE                   : 69
NOT                  : 62
ON                   : 37
OR                   : 49
PRINT                : 42
RCB                  : 24 37
RETURN               : 32
RRB                  : 1 2 16 17 36 37 38 39 40 41 42 43 58 59 60
RSB                  : 11 23 28
SEMICOLON            : 15 32 33 37 38 38
SUB                  : 51 61
SUM                  : 50
TRUE                 : 65
WHERE                : 29
WHILE                : 36
error                : 

Nonterminals, with rules where they appear

block                : 1 2 16 17 34
case                 : 30
cases                : 30 37
const                : 29 56
dec                  : 3 4
declist              : 1 4
elseiflist           : 40 41 43
empty                : 19 26 31 44
exp                  : 11 12 28 32 33 36 37 38 38 38 40 41 43 45 45 46 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 59 61 62 73 74
explist              : 58 74
funcdec              : 6
iddec                : 13 14
idlist               : 14 15
lvalue               : 47 57
paramdec             : 20 21
paramdecs            : 16 17
paramdecslist        : 18 21
program              : 0
relop                : 45 46
relopexp             : 46 55
stmt                 : 25 36 38 39 40 41 41 43
stmtlist             : 24 25 29
type                 : 15 16 22 23
vardec               : 5 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) program -> . MAIN LRB RRB block
    (3) declist -> . dec
    (4) declist -> . declist dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    MAIN            shift and go to state 3
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    program                        shift and go to state 1
    declist                        shift and go to state 2
    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (4) declist -> declist . dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    MAIN            shift and go to state 11
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    dec                            shift and go to state 12
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 3

    (2) program -> MAIN . LRB RRB block

    LRB             shift and go to state 13


state 4

    (3) declist -> dec .

    MAIN            reduce using rule 3 (declist -> dec .)
    FUNCTION        reduce using rule 3 (declist -> dec .)
    ID              reduce using rule 3 (declist -> dec .)


state 5

    (5) dec -> vardec .

    MAIN            reduce using rule 5 (dec -> vardec .)
    FUNCTION        reduce using rule 5 (dec -> vardec .)
    ID              reduce using rule 5 (dec -> vardec .)


state 6

    (6) dec -> funcdec .

    MAIN            reduce using rule 6 (dec -> funcdec .)
    FUNCTION        reduce using rule 6 (dec -> funcdec .)
    ID              reduce using rule 6 (dec -> funcdec .)


state 7

    (15) vardec -> idlist . COLON type SEMICOLON
    (14) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 14
    COMMA           shift and go to state 15


state 8

    (16) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 16


state 9

    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (12) iddec -> ID . ASSIGN exp

    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)
    LSB             shift and go to state 17
    ASSIGN          shift and go to state 18


state 10

    (13) idlist -> iddec .

    COLON           reduce using rule 13 (idlist -> iddec .)
    COMMA           reduce using rule 13 (idlist -> iddec .)


state 11

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 19


state 12

    (4) declist -> declist dec .

    MAIN            reduce using rule 4 (declist -> declist dec .)
    FUNCTION        reduce using rule 4 (declist -> declist dec .)
    ID              reduce using rule 4 (declist -> declist dec .)


state 13

    (2) program -> MAIN LRB . RRB block

    RRB             shift and go to state 20


state 14

    (15) vardec -> idlist COLON . type SEMICOLON
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 21

state 15

    (14) idlist -> idlist COMMA . iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    ID              shift and go to state 9

    iddec                          shift and go to state 25

state 16

    (16) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 26


state 17

    (11) iddec -> ID LSB . exp RSB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 28
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 18

    (12) iddec -> ID ASSIGN . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 39
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 19

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 40


state 20

    (2) program -> MAIN LRB RRB . block
    (24) block -> . LCB stmtlist RCB

    LCB             shift and go to state 42

    block                          shift and go to state 41

state 21

    (15) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 43


state 22

    (7) type -> INTEGER .

    SEMICOLON       reduce using rule 7 (type -> INTEGER .)
    COMMA           reduce using rule 7 (type -> INTEGER .)
    RRB             reduce using rule 7 (type -> INTEGER .)
    LCB             reduce using rule 7 (type -> INTEGER .)


state 23

    (8) type -> FLOAT .

    SEMICOLON       reduce using rule 8 (type -> FLOAT .)
    COMMA           reduce using rule 8 (type -> FLOAT .)
    RRB             reduce using rule 8 (type -> FLOAT .)
    LCB             reduce using rule 8 (type -> FLOAT .)


state 24

    (9) type -> BOOLEAN .

    SEMICOLON       reduce using rule 9 (type -> BOOLEAN .)
    COMMA           reduce using rule 9 (type -> BOOLEAN .)
    RRB             reduce using rule 9 (type -> BOOLEAN .)
    LCB             reduce using rule 9 (type -> BOOLEAN .)


state 25

    (14) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 14 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 14 (idlist -> idlist COMMA iddec .)


state 26

    (16) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (18) paramdecs -> . paramdecslist
    (19) paramdecs -> . empty
    (20) paramdecslist -> . paramdec
    (21) paramdecslist -> . paramdecslist COMMA paramdec
    (75) empty -> .
    (22) paramdec -> . ID COLON type
    (23) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 75 (empty -> .)
    ID              shift and go to state 44

    paramdecs                      shift and go to state 45
    paramdecslist                  shift and go to state 46
    empty                          shift and go to state 47
    paramdec                       shift and go to state 48

state 27

    (58) exp -> ID . LRB explist RRB
    (60) exp -> ID . LRB RRB
    (27) lvalue -> ID .
    (28) lvalue -> ID . LSB exp RSB

    LRB             shift and go to state 49
    ASSIGN          reduce using rule 27 (lvalue -> ID .)
    RSB             reduce using rule 27 (lvalue -> ID .)
    AND             reduce using rule 27 (lvalue -> ID .)
    OR              reduce using rule 27 (lvalue -> ID .)
    SUM             reduce using rule 27 (lvalue -> ID .)
    SUB             reduce using rule 27 (lvalue -> ID .)
    MUL             reduce using rule 27 (lvalue -> ID .)
    DIV             reduce using rule 27 (lvalue -> ID .)
    MOD             reduce using rule 27 (lvalue -> ID .)
    GT              reduce using rule 27 (lvalue -> ID .)
    LT              reduce using rule 27 (lvalue -> ID .)
    NE              reduce using rule 27 (lvalue -> ID .)
    EQ              reduce using rule 27 (lvalue -> ID .)
    LE              reduce using rule 27 (lvalue -> ID .)
    GE              reduce using rule 27 (lvalue -> ID .)
    COLON           reduce using rule 27 (lvalue -> ID .)
    COMMA           reduce using rule 27 (lvalue -> ID .)
    RRB             reduce using rule 27 (lvalue -> ID .)
    SEMICOLON       reduce using rule 27 (lvalue -> ID .)
    LSB             shift and go to state 50


state 28

    (11) iddec -> ID LSB exp . RSB
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 29

    (47) exp -> lvalue . ASSIGN exp
    (57) exp -> lvalue .

    ASSIGN          shift and go to state 66
    RSB             reduce using rule 57 (exp -> lvalue .)
    AND             reduce using rule 57 (exp -> lvalue .)
    OR              reduce using rule 57 (exp -> lvalue .)
    SUM             reduce using rule 57 (exp -> lvalue .)
    SUB             reduce using rule 57 (exp -> lvalue .)
    MUL             reduce using rule 57 (exp -> lvalue .)
    DIV             reduce using rule 57 (exp -> lvalue .)
    MOD             reduce using rule 57 (exp -> lvalue .)
    GT              reduce using rule 57 (exp -> lvalue .)
    LT              reduce using rule 57 (exp -> lvalue .)
    NE              reduce using rule 57 (exp -> lvalue .)
    EQ              reduce using rule 57 (exp -> lvalue .)
    LE              reduce using rule 57 (exp -> lvalue .)
    GE              reduce using rule 57 (exp -> lvalue .)
    COLON           reduce using rule 57 (exp -> lvalue .)
    COMMA           reduce using rule 57 (exp -> lvalue .)
    RRB             reduce using rule 57 (exp -> lvalue .)
    SEMICOLON       reduce using rule 57 (exp -> lvalue .)


state 30

    (61) exp -> SUB . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 67
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 31

    (55) exp -> relopexp .
    (46) relopexp -> relopexp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 55 (exp -> relopexp .)
    AND             reduce using rule 55 (exp -> relopexp .)
    OR              reduce using rule 55 (exp -> relopexp .)
    SUM             reduce using rule 55 (exp -> relopexp .)
    SUB             reduce using rule 55 (exp -> relopexp .)
    MUL             reduce using rule 55 (exp -> relopexp .)
    DIV             reduce using rule 55 (exp -> relopexp .)
    MOD             reduce using rule 55 (exp -> relopexp .)
    COLON           reduce using rule 55 (exp -> relopexp .)
    COMMA           reduce using rule 55 (exp -> relopexp .)
    RRB             reduce using rule 55 (exp -> relopexp .)
    SEMICOLON       reduce using rule 55 (exp -> relopexp .)
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

  ! GT              [ reduce using rule 55 (exp -> relopexp .) ]
  ! LT              [ reduce using rule 55 (exp -> relopexp .) ]
  ! NE              [ reduce using rule 55 (exp -> relopexp .) ]
  ! EQ              [ reduce using rule 55 (exp -> relopexp .) ]
  ! LE              [ reduce using rule 55 (exp -> relopexp .) ]
  ! GE              [ reduce using rule 55 (exp -> relopexp .) ]

    relop                          shift and go to state 68

state 32

    (56) exp -> const .

    RSB             reduce using rule 56 (exp -> const .)
    AND             reduce using rule 56 (exp -> const .)
    OR              reduce using rule 56 (exp -> const .)
    SUM             reduce using rule 56 (exp -> const .)
    SUB             reduce using rule 56 (exp -> const .)
    MUL             reduce using rule 56 (exp -> const .)
    DIV             reduce using rule 56 (exp -> const .)
    MOD             reduce using rule 56 (exp -> const .)
    GT              reduce using rule 56 (exp -> const .)
    LT              reduce using rule 56 (exp -> const .)
    NE              reduce using rule 56 (exp -> const .)
    EQ              reduce using rule 56 (exp -> const .)
    LE              reduce using rule 56 (exp -> const .)
    GE              reduce using rule 56 (exp -> const .)
    COLON           reduce using rule 56 (exp -> const .)
    COMMA           reduce using rule 56 (exp -> const .)
    RRB             reduce using rule 56 (exp -> const .)
    SEMICOLON       reduce using rule 56 (exp -> const .)


state 33

    (59) exp -> LRB . exp RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 69
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 34

    (62) exp -> NOT . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 70
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 35

    (63) const -> INTEGERNUMBER .

    RSB             reduce using rule 63 (const -> INTEGERNUMBER .)
    AND             reduce using rule 63 (const -> INTEGERNUMBER .)
    OR              reduce using rule 63 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 63 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 63 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 63 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 63 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 63 (const -> INTEGERNUMBER .)
    GT              reduce using rule 63 (const -> INTEGERNUMBER .)
    LT              reduce using rule 63 (const -> INTEGERNUMBER .)
    NE              reduce using rule 63 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 63 (const -> INTEGERNUMBER .)
    LE              reduce using rule 63 (const -> INTEGERNUMBER .)
    GE              reduce using rule 63 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 63 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 63 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 63 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 63 (const -> INTEGERNUMBER .)


state 36

    (64) const -> FLOATNUMBER .

    RSB             reduce using rule 64 (const -> FLOATNUMBER .)
    AND             reduce using rule 64 (const -> FLOATNUMBER .)
    OR              reduce using rule 64 (const -> FLOATNUMBER .)
    SUM             reduce using rule 64 (const -> FLOATNUMBER .)
    SUB             reduce using rule 64 (const -> FLOATNUMBER .)
    MUL             reduce using rule 64 (const -> FLOATNUMBER .)
    DIV             reduce using rule 64 (const -> FLOATNUMBER .)
    MOD             reduce using rule 64 (const -> FLOATNUMBER .)
    GT              reduce using rule 64 (const -> FLOATNUMBER .)
    LT              reduce using rule 64 (const -> FLOATNUMBER .)
    NE              reduce using rule 64 (const -> FLOATNUMBER .)
    EQ              reduce using rule 64 (const -> FLOATNUMBER .)
    LE              reduce using rule 64 (const -> FLOATNUMBER .)
    GE              reduce using rule 64 (const -> FLOATNUMBER .)
    COLON           reduce using rule 64 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 64 (const -> FLOATNUMBER .)
    RRB             reduce using rule 64 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 64 (const -> FLOATNUMBER .)


state 37

    (65) const -> TRUE .

    RSB             reduce using rule 65 (const -> TRUE .)
    AND             reduce using rule 65 (const -> TRUE .)
    OR              reduce using rule 65 (const -> TRUE .)
    SUM             reduce using rule 65 (const -> TRUE .)
    SUB             reduce using rule 65 (const -> TRUE .)
    MUL             reduce using rule 65 (const -> TRUE .)
    DIV             reduce using rule 65 (const -> TRUE .)
    MOD             reduce using rule 65 (const -> TRUE .)
    GT              reduce using rule 65 (const -> TRUE .)
    LT              reduce using rule 65 (const -> TRUE .)
    NE              reduce using rule 65 (const -> TRUE .)
    EQ              reduce using rule 65 (const -> TRUE .)
    LE              reduce using rule 65 (const -> TRUE .)
    GE              reduce using rule 65 (const -> TRUE .)
    COLON           reduce using rule 65 (const -> TRUE .)
    COMMA           reduce using rule 65 (const -> TRUE .)
    RRB             reduce using rule 65 (const -> TRUE .)
    SEMICOLON       reduce using rule 65 (const -> TRUE .)


state 38

    (66) const -> FALSE .

    RSB             reduce using rule 66 (const -> FALSE .)
    AND             reduce using rule 66 (const -> FALSE .)
    OR              reduce using rule 66 (const -> FALSE .)
    SUM             reduce using rule 66 (const -> FALSE .)
    SUB             reduce using rule 66 (const -> FALSE .)
    MUL             reduce using rule 66 (const -> FALSE .)
    DIV             reduce using rule 66 (const -> FALSE .)
    MOD             reduce using rule 66 (const -> FALSE .)
    GT              reduce using rule 66 (const -> FALSE .)
    LT              reduce using rule 66 (const -> FALSE .)
    NE              reduce using rule 66 (const -> FALSE .)
    EQ              reduce using rule 66 (const -> FALSE .)
    LE              reduce using rule 66 (const -> FALSE .)
    GE              reduce using rule 66 (const -> FALSE .)
    COLON           reduce using rule 66 (const -> FALSE .)
    COMMA           reduce using rule 66 (const -> FALSE .)
    RRB             reduce using rule 66 (const -> FALSE .)
    SEMICOLON       reduce using rule 66 (const -> FALSE .)


state 39

    (12) iddec -> ID ASSIGN exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    COLON           reduce using rule 12 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 12 (iddec -> ID ASSIGN exp .)
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 40

    (1) program -> declist MAIN LRB RRB . block
    (24) block -> . LCB stmtlist RCB

    LCB             shift and go to state 42

    block                          shift and go to state 71

state 41

    (2) program -> MAIN LRB RRB block .

    $end            reduce using rule 2 (program -> MAIN LRB RRB block .)


state 42

    (24) block -> LCB . stmtlist RCB
    (25) stmtlist -> . stmtlist stmt
    (26) stmtlist -> . empty
    (75) empty -> .

    RCB             reduce using rule 75 (empty -> .)
    RETURN          reduce using rule 75 (empty -> .)
    WHILE           reduce using rule 75 (empty -> .)
    ON              reduce using rule 75 (empty -> .)
    FOR             reduce using rule 75 (empty -> .)
    IF              reduce using rule 75 (empty -> .)
    PRINT           reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    LRB             reduce using rule 75 (empty -> .)
    SUB             reduce using rule 75 (empty -> .)
    NOT             reduce using rule 75 (empty -> .)
    LCB             reduce using rule 75 (empty -> .)
    INTEGERNUMBER   reduce using rule 75 (empty -> .)
    FLOATNUMBER     reduce using rule 75 (empty -> .)
    TRUE            reduce using rule 75 (empty -> .)
    FALSE           reduce using rule 75 (empty -> .)

    stmtlist                       shift and go to state 72
    empty                          shift and go to state 73

state 43

    (15) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)


state 44

    (22) paramdec -> ID . COLON type
    (23) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 74
    LSB             shift and go to state 75


state 45

    (16) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (17) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 76


state 46

    (18) paramdecs -> paramdecslist .
    (21) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 18 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 77


state 47

    (19) paramdecs -> empty .

    RRB             reduce using rule 19 (paramdecs -> empty .)


state 48

    (20) paramdecslist -> paramdec .

    COMMA           reduce using rule 20 (paramdecslist -> paramdec .)
    RRB             reduce using rule 20 (paramdecslist -> paramdec .)


state 49

    (58) exp -> ID LRB . explist RRB
    (60) exp -> ID LRB . RRB
    (73) explist -> . exp
    (74) explist -> . explist COMMA exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    RRB             shift and go to state 79
    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    explist                        shift and go to state 78
    exp                            shift and go to state 80
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 50

    (28) lvalue -> ID LSB . exp RSB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 81
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 51

    (11) iddec -> ID LSB exp RSB .

    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 52

    (48) exp -> exp AND . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 82
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 53

    (49) exp -> exp OR . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 83
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 54

    (50) exp -> exp SUM . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 84
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 55

    (51) exp -> exp SUB . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 85
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 56

    (52) exp -> exp MUL . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 86
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 57

    (53) exp -> exp DIV . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 87
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 58

    (54) exp -> exp MOD . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 88
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 59

    (45) relopexp -> exp relop . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 89
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 60

    (67) relop -> GT .

    ID              reduce using rule 67 (relop -> GT .)
    LRB             reduce using rule 67 (relop -> GT .)
    SUB             reduce using rule 67 (relop -> GT .)
    NOT             reduce using rule 67 (relop -> GT .)
    INTEGERNUMBER   reduce using rule 67 (relop -> GT .)
    FLOATNUMBER     reduce using rule 67 (relop -> GT .)
    TRUE            reduce using rule 67 (relop -> GT .)
    FALSE           reduce using rule 67 (relop -> GT .)


state 61

    (68) relop -> LT .

    ID              reduce using rule 68 (relop -> LT .)
    LRB             reduce using rule 68 (relop -> LT .)
    SUB             reduce using rule 68 (relop -> LT .)
    NOT             reduce using rule 68 (relop -> LT .)
    INTEGERNUMBER   reduce using rule 68 (relop -> LT .)
    FLOATNUMBER     reduce using rule 68 (relop -> LT .)
    TRUE            reduce using rule 68 (relop -> LT .)
    FALSE           reduce using rule 68 (relop -> LT .)


state 62

    (69) relop -> NE .

    ID              reduce using rule 69 (relop -> NE .)
    LRB             reduce using rule 69 (relop -> NE .)
    SUB             reduce using rule 69 (relop -> NE .)
    NOT             reduce using rule 69 (relop -> NE .)
    INTEGERNUMBER   reduce using rule 69 (relop -> NE .)
    FLOATNUMBER     reduce using rule 69 (relop -> NE .)
    TRUE            reduce using rule 69 (relop -> NE .)
    FALSE           reduce using rule 69 (relop -> NE .)


state 63

    (70) relop -> EQ .

    ID              reduce using rule 70 (relop -> EQ .)
    LRB             reduce using rule 70 (relop -> EQ .)
    SUB             reduce using rule 70 (relop -> EQ .)
    NOT             reduce using rule 70 (relop -> EQ .)
    INTEGERNUMBER   reduce using rule 70 (relop -> EQ .)
    FLOATNUMBER     reduce using rule 70 (relop -> EQ .)
    TRUE            reduce using rule 70 (relop -> EQ .)
    FALSE           reduce using rule 70 (relop -> EQ .)


state 64

    (71) relop -> LE .

    ID              reduce using rule 71 (relop -> LE .)
    LRB             reduce using rule 71 (relop -> LE .)
    SUB             reduce using rule 71 (relop -> LE .)
    NOT             reduce using rule 71 (relop -> LE .)
    INTEGERNUMBER   reduce using rule 71 (relop -> LE .)
    FLOATNUMBER     reduce using rule 71 (relop -> LE .)
    TRUE            reduce using rule 71 (relop -> LE .)
    FALSE           reduce using rule 71 (relop -> LE .)


state 65

    (72) relop -> GE .

    ID              reduce using rule 72 (relop -> GE .)
    LRB             reduce using rule 72 (relop -> GE .)
    SUB             reduce using rule 72 (relop -> GE .)
    NOT             reduce using rule 72 (relop -> GE .)
    INTEGERNUMBER   reduce using rule 72 (relop -> GE .)
    FLOATNUMBER     reduce using rule 72 (relop -> GE .)
    TRUE            reduce using rule 72 (relop -> GE .)
    FALSE           reduce using rule 72 (relop -> GE .)


state 66

    (47) exp -> lvalue ASSIGN . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    lvalue                         shift and go to state 29
    exp                            shift and go to state 90
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 67

    (61) exp -> SUB exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             reduce using rule 61 (exp -> SUB exp .)
    AND             reduce using rule 61 (exp -> SUB exp .)
    OR              reduce using rule 61 (exp -> SUB exp .)
    SUM             reduce using rule 61 (exp -> SUB exp .)
    SUB             reduce using rule 61 (exp -> SUB exp .)
    MOD             reduce using rule 61 (exp -> SUB exp .)
    GT              reduce using rule 61 (exp -> SUB exp .)
    LT              reduce using rule 61 (exp -> SUB exp .)
    NE              reduce using rule 61 (exp -> SUB exp .)
    EQ              reduce using rule 61 (exp -> SUB exp .)
    LE              reduce using rule 61 (exp -> SUB exp .)
    GE              reduce using rule 61 (exp -> SUB exp .)
    COLON           reduce using rule 61 (exp -> SUB exp .)
    COMMA           reduce using rule 61 (exp -> SUB exp .)
    RRB             reduce using rule 61 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 61 (exp -> SUB exp .)
    MUL             shift and go to state 56
    DIV             shift and go to state 57

  ! MUL             [ reduce using rule 61 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 61 (exp -> SUB exp .) ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! SUM             [ shift and go to state 54 ]
  ! SUB             [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 58 ]
  ! GT              [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 65 ]

    relop                          shift and go to state 59

state 68

    (46) relopexp -> relopexp relop . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    relopexp                       shift and go to state 31
    exp                            shift and go to state 91
    lvalue                         shift and go to state 29
    const                          shift and go to state 32

state 69

    (59) exp -> LRB exp . RRB
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RRB             shift and go to state 92
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 70

    (62) exp -> NOT exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 62 (exp -> NOT exp .)
    COLON           reduce using rule 62 (exp -> NOT exp .)
    COMMA           reduce using rule 62 (exp -> NOT exp .)
    RRB             reduce using rule 62 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 62 (exp -> NOT exp .)
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

  ! AND             [ reduce using rule 62 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 62 (exp -> NOT exp .) ]
  ! SUM             [ reduce using rule 62 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 62 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 62 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 62 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 62 (exp -> NOT exp .) ]
  ! GT              [ reduce using rule 62 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 62 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 62 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 62 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 62 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 62 (exp -> NOT exp .) ]

    relop                          shift and go to state 59

state 71

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 72

    (24) block -> LCB stmtlist . RCB
    (25) stmtlist -> stmtlist . stmt
    (32) stmt -> . RETURN exp SEMICOLON
    (33) stmt -> . exp SEMICOLON
    (34) stmt -> . block
    (35) stmt -> . vardec
    (36) stmt -> . WHILE LRB exp RRB stmt
    (37) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (38) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> . FOR LRB ID IN ID RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (42) stmt -> . PRINT LRB ID RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RCB             shift and go to state 93
    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 103
    PRINT           shift and go to state 104
    ID              shift and go to state 102
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    stmt                           shift and go to state 94
    exp                            shift and go to state 96
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 73

    (26) stmtlist -> empty .

    RCB             reduce using rule 26 (stmtlist -> empty .)
    RETURN          reduce using rule 26 (stmtlist -> empty .)
    WHILE           reduce using rule 26 (stmtlist -> empty .)
    ON              reduce using rule 26 (stmtlist -> empty .)
    FOR             reduce using rule 26 (stmtlist -> empty .)
    IF              reduce using rule 26 (stmtlist -> empty .)
    PRINT           reduce using rule 26 (stmtlist -> empty .)
    ID              reduce using rule 26 (stmtlist -> empty .)
    LRB             reduce using rule 26 (stmtlist -> empty .)
    SUB             reduce using rule 26 (stmtlist -> empty .)
    NOT             reduce using rule 26 (stmtlist -> empty .)
    LCB             reduce using rule 26 (stmtlist -> empty .)
    INTEGERNUMBER   reduce using rule 26 (stmtlist -> empty .)
    FLOATNUMBER     reduce using rule 26 (stmtlist -> empty .)
    TRUE            reduce using rule 26 (stmtlist -> empty .)
    FALSE           reduce using rule 26 (stmtlist -> empty .)
    WHERE           reduce using rule 26 (stmtlist -> empty .)


state 74

    (22) paramdec -> ID COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 105

state 75

    (23) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 106


state 76

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (17) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (24) block -> . LCB stmtlist RCB

    COLON           shift and go to state 107
    LCB             shift and go to state 42

    block                          shift and go to state 108

state 77

    (21) paramdecslist -> paramdecslist COMMA . paramdec
    (22) paramdec -> . ID COLON type
    (23) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 44

    paramdec                       shift and go to state 109

state 78

    (58) exp -> ID LRB explist . RRB
    (74) explist -> explist . COMMA exp

    RRB             shift and go to state 110
    COMMA           shift and go to state 111


state 79

    (60) exp -> ID LRB RRB .

    RSB             reduce using rule 60 (exp -> ID LRB RRB .)
    AND             reduce using rule 60 (exp -> ID LRB RRB .)
    OR              reduce using rule 60 (exp -> ID LRB RRB .)
    SUM             reduce using rule 60 (exp -> ID LRB RRB .)
    SUB             reduce using rule 60 (exp -> ID LRB RRB .)
    MUL             reduce using rule 60 (exp -> ID LRB RRB .)
    DIV             reduce using rule 60 (exp -> ID LRB RRB .)
    MOD             reduce using rule 60 (exp -> ID LRB RRB .)
    GT              reduce using rule 60 (exp -> ID LRB RRB .)
    LT              reduce using rule 60 (exp -> ID LRB RRB .)
    NE              reduce using rule 60 (exp -> ID LRB RRB .)
    EQ              reduce using rule 60 (exp -> ID LRB RRB .)
    LE              reduce using rule 60 (exp -> ID LRB RRB .)
    GE              reduce using rule 60 (exp -> ID LRB RRB .)
    COLON           reduce using rule 60 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 60 (exp -> ID LRB RRB .)
    RRB             reduce using rule 60 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 60 (exp -> ID LRB RRB .)


state 80

    (73) explist -> exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RRB             reduce using rule 73 (explist -> exp .)
    COMMA           reduce using rule 73 (explist -> exp .)
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 81

    (28) lvalue -> ID LSB exp . RSB
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             shift and go to state 112
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 82

    (48) exp -> exp AND exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             reduce using rule 48 (exp -> exp AND exp .)
    AND             reduce using rule 48 (exp -> exp AND exp .)
    OR              reduce using rule 48 (exp -> exp AND exp .)
    COLON           reduce using rule 48 (exp -> exp AND exp .)
    COMMA           reduce using rule 48 (exp -> exp AND exp .)
    RRB             reduce using rule 48 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 48 (exp -> exp AND exp .)
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

  ! SUM             [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! SUB             [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! MUL             [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! EQ              [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! LE              [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! GE              [ reduce using rule 48 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]

    relop                          shift and go to state 59

state 83

    (49) exp -> exp OR exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             reduce using rule 49 (exp -> exp OR exp .)
    OR              reduce using rule 49 (exp -> exp OR exp .)
    COLON           reduce using rule 49 (exp -> exp OR exp .)
    COMMA           reduce using rule 49 (exp -> exp OR exp .)
    RRB             reduce using rule 49 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 49 (exp -> exp OR exp .)
    AND             shift and go to state 52
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

  ! AND             [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! SUM             [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! SUB             [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! MUL             [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! LE              [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! GE              [ reduce using rule 49 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 53 ]

    relop                          shift and go to state 59

state 84

    (50) exp -> exp SUM exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             reduce using rule 50 (exp -> exp SUM exp .)
    AND             reduce using rule 50 (exp -> exp SUM exp .)
    OR              reduce using rule 50 (exp -> exp SUM exp .)
    SUM             reduce using rule 50 (exp -> exp SUM exp .)
    SUB             reduce using rule 50 (exp -> exp SUM exp .)
    MOD             reduce using rule 50 (exp -> exp SUM exp .)
    GT              reduce using rule 50 (exp -> exp SUM exp .)
    LT              reduce using rule 50 (exp -> exp SUM exp .)
    NE              reduce using rule 50 (exp -> exp SUM exp .)
    EQ              reduce using rule 50 (exp -> exp SUM exp .)
    LE              reduce using rule 50 (exp -> exp SUM exp .)
    GE              reduce using rule 50 (exp -> exp SUM exp .)
    COLON           reduce using rule 50 (exp -> exp SUM exp .)
    COMMA           reduce using rule 50 (exp -> exp SUM exp .)
    RRB             reduce using rule 50 (exp -> exp SUM exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp SUM exp .)
    MUL             shift and go to state 56
    DIV             shift and go to state 57

  ! MUL             [ reduce using rule 50 (exp -> exp SUM exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> exp SUM exp .) ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! SUM             [ shift and go to state 54 ]
  ! SUB             [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 58 ]
  ! GT              [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 65 ]

    relop                          shift and go to state 59

state 85

    (51) exp -> exp SUB exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             reduce using rule 51 (exp -> exp SUB exp .)
    AND             reduce using rule 51 (exp -> exp SUB exp .)
    OR              reduce using rule 51 (exp -> exp SUB exp .)
    SUM             reduce using rule 51 (exp -> exp SUB exp .)
    SUB             reduce using rule 51 (exp -> exp SUB exp .)
    MOD             reduce using rule 51 (exp -> exp SUB exp .)
    GT              reduce using rule 51 (exp -> exp SUB exp .)
    LT              reduce using rule 51 (exp -> exp SUB exp .)
    NE              reduce using rule 51 (exp -> exp SUB exp .)
    EQ              reduce using rule 51 (exp -> exp SUB exp .)
    LE              reduce using rule 51 (exp -> exp SUB exp .)
    GE              reduce using rule 51 (exp -> exp SUB exp .)
    COLON           reduce using rule 51 (exp -> exp SUB exp .)
    COMMA           reduce using rule 51 (exp -> exp SUB exp .)
    RRB             reduce using rule 51 (exp -> exp SUB exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp SUB exp .)
    MUL             shift and go to state 56
    DIV             shift and go to state 57

  ! MUL             [ reduce using rule 51 (exp -> exp SUB exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp SUB exp .) ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! SUM             [ shift and go to state 54 ]
  ! SUB             [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 58 ]
  ! GT              [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 65 ]

    relop                          shift and go to state 59

state 86

    (52) exp -> exp MUL exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             reduce using rule 52 (exp -> exp MUL exp .)
    AND             reduce using rule 52 (exp -> exp MUL exp .)
    OR              reduce using rule 52 (exp -> exp MUL exp .)
    SUM             reduce using rule 52 (exp -> exp MUL exp .)
    SUB             reduce using rule 52 (exp -> exp MUL exp .)
    MUL             reduce using rule 52 (exp -> exp MUL exp .)
    DIV             reduce using rule 52 (exp -> exp MUL exp .)
    MOD             reduce using rule 52 (exp -> exp MUL exp .)
    GT              reduce using rule 52 (exp -> exp MUL exp .)
    LT              reduce using rule 52 (exp -> exp MUL exp .)
    NE              reduce using rule 52 (exp -> exp MUL exp .)
    EQ              reduce using rule 52 (exp -> exp MUL exp .)
    LE              reduce using rule 52 (exp -> exp MUL exp .)
    GE              reduce using rule 52 (exp -> exp MUL exp .)
    COLON           reduce using rule 52 (exp -> exp MUL exp .)
    COMMA           reduce using rule 52 (exp -> exp MUL exp .)
    RRB             reduce using rule 52 (exp -> exp MUL exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp MUL exp .)

  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! SUM             [ shift and go to state 54 ]
  ! SUB             [ shift and go to state 55 ]
  ! MUL             [ shift and go to state 56 ]
  ! DIV             [ shift and go to state 57 ]
  ! MOD             [ shift and go to state 58 ]
  ! GT              [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 65 ]

    relop                          shift and go to state 59

state 87

    (53) exp -> exp DIV exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             reduce using rule 53 (exp -> exp DIV exp .)
    AND             reduce using rule 53 (exp -> exp DIV exp .)
    OR              reduce using rule 53 (exp -> exp DIV exp .)
    SUM             reduce using rule 53 (exp -> exp DIV exp .)
    SUB             reduce using rule 53 (exp -> exp DIV exp .)
    MUL             reduce using rule 53 (exp -> exp DIV exp .)
    DIV             reduce using rule 53 (exp -> exp DIV exp .)
    MOD             reduce using rule 53 (exp -> exp DIV exp .)
    GT              reduce using rule 53 (exp -> exp DIV exp .)
    LT              reduce using rule 53 (exp -> exp DIV exp .)
    NE              reduce using rule 53 (exp -> exp DIV exp .)
    EQ              reduce using rule 53 (exp -> exp DIV exp .)
    LE              reduce using rule 53 (exp -> exp DIV exp .)
    GE              reduce using rule 53 (exp -> exp DIV exp .)
    COLON           reduce using rule 53 (exp -> exp DIV exp .)
    COMMA           reduce using rule 53 (exp -> exp DIV exp .)
    RRB             reduce using rule 53 (exp -> exp DIV exp .)
    SEMICOLON       reduce using rule 53 (exp -> exp DIV exp .)

  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! SUM             [ shift and go to state 54 ]
  ! SUB             [ shift and go to state 55 ]
  ! MUL             [ shift and go to state 56 ]
  ! DIV             [ shift and go to state 57 ]
  ! MOD             [ shift and go to state 58 ]
  ! GT              [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 65 ]

    relop                          shift and go to state 59

state 88

    (54) exp -> exp MOD exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             reduce using rule 54 (exp -> exp MOD exp .)
    AND             reduce using rule 54 (exp -> exp MOD exp .)
    OR              reduce using rule 54 (exp -> exp MOD exp .)
    MOD             reduce using rule 54 (exp -> exp MOD exp .)
    GT              reduce using rule 54 (exp -> exp MOD exp .)
    LT              reduce using rule 54 (exp -> exp MOD exp .)
    NE              reduce using rule 54 (exp -> exp MOD exp .)
    EQ              reduce using rule 54 (exp -> exp MOD exp .)
    LE              reduce using rule 54 (exp -> exp MOD exp .)
    GE              reduce using rule 54 (exp -> exp MOD exp .)
    COLON           reduce using rule 54 (exp -> exp MOD exp .)
    COMMA           reduce using rule 54 (exp -> exp MOD exp .)
    RRB             reduce using rule 54 (exp -> exp MOD exp .)
    SEMICOLON       reduce using rule 54 (exp -> exp MOD exp .)
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57

  ! SUM             [ reduce using rule 54 (exp -> exp MOD exp .) ]
  ! SUB             [ reduce using rule 54 (exp -> exp MOD exp .) ]
  ! MUL             [ reduce using rule 54 (exp -> exp MOD exp .) ]
  ! DIV             [ reduce using rule 54 (exp -> exp MOD exp .) ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! MOD             [ shift and go to state 58 ]
  ! GT              [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! NE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 63 ]
  ! LE              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 65 ]

    relop                          shift and go to state 59

state 89

    (45) relopexp -> exp relop exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 45 (relopexp -> exp relop exp .)
    COLON           reduce using rule 45 (relopexp -> exp relop exp .)
    COMMA           reduce using rule 45 (relopexp -> exp relop exp .)
    RRB             reduce using rule 45 (relopexp -> exp relop exp .)
    SEMICOLON       reduce using rule 45 (relopexp -> exp relop exp .)
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

  ! GT              [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! LT              [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! NE              [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! EQ              [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! LE              [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! GE              [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! AND             [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! OR              [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! SUM             [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! SUB             [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! MUL             [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! DIV             [ reduce using rule 45 (relopexp -> exp relop exp .) ]
  ! MOD             [ reduce using rule 45 (relopexp -> exp relop exp .) ]

    relop                          shift and go to state 59

state 90

    (47) exp -> lvalue ASSIGN exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             reduce using rule 47 (exp -> lvalue ASSIGN exp .)
    COLON           reduce using rule 47 (exp -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 47 (exp -> lvalue ASSIGN exp .)
    RRB             reduce using rule 47 (exp -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 47 (exp -> lvalue ASSIGN exp .)
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

  ! AND             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! OR              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! SUM             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! GT              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! LT              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! NE              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! EQ              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! LE              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! GE              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]

    relop                          shift and go to state 59

state 91

    (46) relopexp -> relopexp relop exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 46 (relopexp -> relopexp relop exp .)
    COLON           reduce using rule 46 (relopexp -> relopexp relop exp .)
    COMMA           reduce using rule 46 (relopexp -> relopexp relop exp .)
    RRB             reduce using rule 46 (relopexp -> relopexp relop exp .)
    SEMICOLON       reduce using rule 46 (relopexp -> relopexp relop exp .)
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

  ! GT              [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! LT              [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! NE              [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! EQ              [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! LE              [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! GE              [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! AND             [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! OR              [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! SUM             [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! SUB             [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! MUL             [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! DIV             [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]
  ! MOD             [ reduce using rule 46 (relopexp -> relopexp relop exp .) ]

    relop                          shift and go to state 59

state 92

    (59) exp -> LRB exp RRB .

    RSB             reduce using rule 59 (exp -> LRB exp RRB .)
    AND             reduce using rule 59 (exp -> LRB exp RRB .)
    OR              reduce using rule 59 (exp -> LRB exp RRB .)
    SUM             reduce using rule 59 (exp -> LRB exp RRB .)
    SUB             reduce using rule 59 (exp -> LRB exp RRB .)
    MUL             reduce using rule 59 (exp -> LRB exp RRB .)
    DIV             reduce using rule 59 (exp -> LRB exp RRB .)
    MOD             reduce using rule 59 (exp -> LRB exp RRB .)
    GT              reduce using rule 59 (exp -> LRB exp RRB .)
    LT              reduce using rule 59 (exp -> LRB exp RRB .)
    NE              reduce using rule 59 (exp -> LRB exp RRB .)
    EQ              reduce using rule 59 (exp -> LRB exp RRB .)
    LE              reduce using rule 59 (exp -> LRB exp RRB .)
    GE              reduce using rule 59 (exp -> LRB exp RRB .)
    COLON           reduce using rule 59 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 59 (exp -> LRB exp RRB .)
    RRB             reduce using rule 59 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 59 (exp -> LRB exp RRB .)


state 93

    (24) block -> LCB stmtlist RCB .

    $end            reduce using rule 24 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 24 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 24 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 24 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 24 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 24 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 24 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 24 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 24 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 24 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 24 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 24 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 24 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 24 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 24 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 24 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 24 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 24 (block -> LCB stmtlist RCB .)


state 94

    (25) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 25 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 25 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 25 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 25 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 25 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 25 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 25 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 25 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 25 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 25 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 25 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 25 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 25 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 25 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 25 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 25 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 25 (stmtlist -> stmtlist stmt .)


state 95

    (32) stmt -> RETURN . exp SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 113
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 96

    (33) stmt -> exp . SEMICOLON
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    SEMICOLON       shift and go to state 114
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 97

    (34) stmt -> block .

    RCB             reduce using rule 34 (stmt -> block .)
    RETURN          reduce using rule 34 (stmt -> block .)
    WHILE           reduce using rule 34 (stmt -> block .)
    ON              reduce using rule 34 (stmt -> block .)
    FOR             reduce using rule 34 (stmt -> block .)
    IF              reduce using rule 34 (stmt -> block .)
    PRINT           reduce using rule 34 (stmt -> block .)
    ID              reduce using rule 34 (stmt -> block .)
    LRB             reduce using rule 34 (stmt -> block .)
    SUB             reduce using rule 34 (stmt -> block .)
    NOT             reduce using rule 34 (stmt -> block .)
    LCB             reduce using rule 34 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> block .)
    FLOATNUMBER     reduce using rule 34 (stmt -> block .)
    TRUE            reduce using rule 34 (stmt -> block .)
    FALSE           reduce using rule 34 (stmt -> block .)
    ELSE            reduce using rule 34 (stmt -> block .)
    ELSEIF          reduce using rule 34 (stmt -> block .)
    WHERE           reduce using rule 34 (stmt -> block .)


state 98

    (35) stmt -> vardec .

    RCB             reduce using rule 35 (stmt -> vardec .)
    RETURN          reduce using rule 35 (stmt -> vardec .)
    WHILE           reduce using rule 35 (stmt -> vardec .)
    ON              reduce using rule 35 (stmt -> vardec .)
    FOR             reduce using rule 35 (stmt -> vardec .)
    IF              reduce using rule 35 (stmt -> vardec .)
    PRINT           reduce using rule 35 (stmt -> vardec .)
    ID              reduce using rule 35 (stmt -> vardec .)
    LRB             reduce using rule 35 (stmt -> vardec .)
    SUB             reduce using rule 35 (stmt -> vardec .)
    NOT             reduce using rule 35 (stmt -> vardec .)
    LCB             reduce using rule 35 (stmt -> vardec .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> vardec .)
    FLOATNUMBER     reduce using rule 35 (stmt -> vardec .)
    TRUE            reduce using rule 35 (stmt -> vardec .)
    FALSE           reduce using rule 35 (stmt -> vardec .)
    ELSE            reduce using rule 35 (stmt -> vardec .)
    ELSEIF          reduce using rule 35 (stmt -> vardec .)
    WHERE           reduce using rule 35 (stmt -> vardec .)


state 99

    (36) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 115


state 100

    (37) stmt -> ON . LRB exp RRB LCB cases RCB SEMICOLON

    LRB             shift and go to state 116


state 101

    (38) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> FOR . LRB ID IN ID RRB stmt

    LRB             shift and go to state 117


state 102

    (58) exp -> ID . LRB explist RRB
    (60) exp -> ID . LRB RRB
    (27) lvalue -> ID .
    (28) lvalue -> ID . LSB exp RSB
    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (12) iddec -> ID . ASSIGN exp

    LRB             shift and go to state 49
    ASSIGN          reduce using rule 27 (lvalue -> ID .)
    SEMICOLON       reduce using rule 27 (lvalue -> ID .)
    AND             reduce using rule 27 (lvalue -> ID .)
    OR              reduce using rule 27 (lvalue -> ID .)
    SUM             reduce using rule 27 (lvalue -> ID .)
    SUB             reduce using rule 27 (lvalue -> ID .)
    MUL             reduce using rule 27 (lvalue -> ID .)
    DIV             reduce using rule 27 (lvalue -> ID .)
    MOD             reduce using rule 27 (lvalue -> ID .)
    GT              reduce using rule 27 (lvalue -> ID .)
    LT              reduce using rule 27 (lvalue -> ID .)
    NE              reduce using rule 27 (lvalue -> ID .)
    EQ              reduce using rule 27 (lvalue -> ID .)
    LE              reduce using rule 27 (lvalue -> ID .)
    GE              reduce using rule 27 (lvalue -> ID .)
    LSB             shift and go to state 118
    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)

  ! ASSIGN          [ shift and go to state 18 ]


state 103

    (40) stmt -> IF . LRB exp RRB stmt elseiflist
    (41) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt

    LRB             shift and go to state 119


state 104

    (42) stmt -> PRINT . LRB ID RRB

    LRB             shift and go to state 120


state 105

    (22) paramdec -> ID COLON type .

    COMMA           reduce using rule 22 (paramdec -> ID COLON type .)
    RRB             reduce using rule 22 (paramdec -> ID COLON type .)


state 106

    (23) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 121


state 107

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 122

state 108

    (17) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 109

    (21) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 21 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 21 (paramdecslist -> paramdecslist COMMA paramdec .)


state 110

    (58) exp -> ID LRB explist RRB .

    RSB             reduce using rule 58 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 58 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 58 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 58 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 58 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 58 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 58 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 58 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 58 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 58 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 58 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 58 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 58 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 58 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 58 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 58 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 58 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 58 (exp -> ID LRB explist RRB .)


state 111

    (74) explist -> explist COMMA . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 123
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 112

    (28) lvalue -> ID LSB exp RSB .

    ASSIGN          reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID LSB exp RSB .)


state 113

    (32) stmt -> RETURN exp . SEMICOLON
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    SEMICOLON       shift and go to state 124
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 114

    (33) stmt -> exp SEMICOLON .

    RCB             reduce using rule 33 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 33 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 33 (stmt -> exp SEMICOLON .)
    ON              reduce using rule 33 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 33 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 33 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 33 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 33 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 33 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 33 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 33 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 33 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 33 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 33 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 33 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 33 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 33 (stmt -> exp SEMICOLON .)
    ELSEIF          reduce using rule 33 (stmt -> exp SEMICOLON .)
    WHERE           reduce using rule 33 (stmt -> exp SEMICOLON .)


state 115

    (36) stmt -> WHILE LRB . exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 125
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 116

    (37) stmt -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 126
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 117

    (38) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> FOR LRB . ID IN ID RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 128
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 127
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 118

    (28) lvalue -> ID LSB . exp RSB
    (11) iddec -> ID LSB . exp RSB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 129
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 119

    (40) stmt -> IF LRB . exp RRB stmt elseiflist
    (41) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 130
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 120

    (42) stmt -> PRINT LRB . ID RRB

    ID              shift and go to state 131


state 121

    (23) paramdec -> ID LSB RSB COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 132

state 122

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (24) block -> . LCB stmtlist RCB

    LCB             shift and go to state 42

    block                          shift and go to state 133

state 123

    (74) explist -> explist COMMA exp .
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RRB             reduce using rule 74 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 74 (explist -> explist COMMA exp .)
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 124

    (32) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    ON              reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 32 (stmt -> RETURN exp SEMICOLON .)


state 125

    (36) stmt -> WHILE LRB exp . RRB stmt
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RRB             shift and go to state 134
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 126

    (37) stmt -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RRB             shift and go to state 135
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 127

    (38) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    SEMICOLON       shift and go to state 136
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 128

    (39) stmt -> FOR LRB ID . IN ID RRB stmt
    (58) exp -> ID . LRB explist RRB
    (60) exp -> ID . LRB RRB
    (27) lvalue -> ID .
    (28) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 137
    LRB             shift and go to state 49
    ASSIGN          reduce using rule 27 (lvalue -> ID .)
    SEMICOLON       reduce using rule 27 (lvalue -> ID .)
    AND             reduce using rule 27 (lvalue -> ID .)
    OR              reduce using rule 27 (lvalue -> ID .)
    SUM             reduce using rule 27 (lvalue -> ID .)
    SUB             reduce using rule 27 (lvalue -> ID .)
    MUL             reduce using rule 27 (lvalue -> ID .)
    DIV             reduce using rule 27 (lvalue -> ID .)
    MOD             reduce using rule 27 (lvalue -> ID .)
    GT              reduce using rule 27 (lvalue -> ID .)
    LT              reduce using rule 27 (lvalue -> ID .)
    NE              reduce using rule 27 (lvalue -> ID .)
    EQ              reduce using rule 27 (lvalue -> ID .)
    LE              reduce using rule 27 (lvalue -> ID .)
    GE              reduce using rule 27 (lvalue -> ID .)
    LSB             shift and go to state 50


state 129

    (28) lvalue -> ID LSB exp . RSB
    (11) iddec -> ID LSB exp . RSB
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RSB             shift and go to state 138
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 130

    (40) stmt -> IF LRB exp . RRB stmt elseiflist
    (41) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RRB             shift and go to state 139
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 131

    (42) stmt -> PRINT LRB ID . RRB

    RRB             shift and go to state 140


state 132

    (23) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 23 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 23 (paramdec -> ID LSB RSB COLON type .)


state 133

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 134

    (36) stmt -> WHILE LRB exp RRB . stmt
    (32) stmt -> . RETURN exp SEMICOLON
    (33) stmt -> . exp SEMICOLON
    (34) stmt -> . block
    (35) stmt -> . vardec
    (36) stmt -> . WHILE LRB exp RRB stmt
    (37) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (38) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> . FOR LRB ID IN ID RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (42) stmt -> . PRINT LRB ID RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 103
    PRINT           shift and go to state 104
    ID              shift and go to state 102
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 141
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 135

    (37) stmt -> ON LRB exp RRB . LCB cases RCB SEMICOLON

    LCB             shift and go to state 142


state 136

    (38) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 143
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 137

    (39) stmt -> FOR LRB ID IN . ID RRB stmt

    ID              shift and go to state 144


state 138

    (28) lvalue -> ID LSB exp RSB .
    (11) iddec -> ID LSB exp RSB .

    ASSIGN          reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 28 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 139

    (40) stmt -> IF LRB exp RRB . stmt elseiflist
    (41) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (32) stmt -> . RETURN exp SEMICOLON
    (33) stmt -> . exp SEMICOLON
    (34) stmt -> . block
    (35) stmt -> . vardec
    (36) stmt -> . WHILE LRB exp RRB stmt
    (37) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (38) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> . FOR LRB ID IN ID RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (42) stmt -> . PRINT LRB ID RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 103
    PRINT           shift and go to state 104
    ID              shift and go to state 102
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 145
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 140

    (42) stmt -> PRINT LRB ID RRB .

    RCB             reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    RETURN          reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    WHILE           reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    ON              reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    FOR             reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    IF              reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    PRINT           reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    ID              reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    LRB             reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    SUB             reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    NOT             reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    LCB             reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    INTEGERNUMBER   reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    FLOATNUMBER     reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    TRUE            reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    FALSE           reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    ELSE            reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    ELSEIF          reduce using rule 42 (stmt -> PRINT LRB ID RRB .)
    WHERE           reduce using rule 42 (stmt -> PRINT LRB ID RRB .)


state 141

    (36) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    ON              reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    ELSEIF          reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)
    WHERE           reduce using rule 36 (stmt -> WHILE LRB exp RRB stmt .)


state 142

    (37) stmt -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (30) cases -> . cases case
    (31) cases -> . empty
    (75) empty -> .

    RCB             reduce using rule 75 (empty -> .)
    WHERE           reduce using rule 75 (empty -> .)

    cases                          shift and go to state 146
    empty                          shift and go to state 147

state 143

    (38) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    SEMICOLON       shift and go to state 148
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 144

    (39) stmt -> FOR LRB ID IN ID . RRB stmt

    RRB             shift and go to state 149


state 145

    (40) stmt -> IF LRB exp RRB stmt . elseiflist
    (41) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (43) elseiflist -> . elseiflist ELSEIF LRB exp RRB stmt
    (44) elseiflist -> . empty
    (75) empty -> .

    RCB             reduce using rule 75 (empty -> .)
    RETURN          reduce using rule 75 (empty -> .)
    WHILE           reduce using rule 75 (empty -> .)
    ON              reduce using rule 75 (empty -> .)
    FOR             reduce using rule 75 (empty -> .)
    IF              reduce using rule 75 (empty -> .)
    PRINT           reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    LRB             reduce using rule 75 (empty -> .)
    SUB             reduce using rule 75 (empty -> .)
    NOT             reduce using rule 75 (empty -> .)
    LCB             reduce using rule 75 (empty -> .)
    INTEGERNUMBER   reduce using rule 75 (empty -> .)
    FLOATNUMBER     reduce using rule 75 (empty -> .)
    TRUE            reduce using rule 75 (empty -> .)
    FALSE           reduce using rule 75 (empty -> .)
    ELSE            reduce using rule 75 (empty -> .)
    ELSEIF          reduce using rule 75 (empty -> .)
    WHERE           reduce using rule 75 (empty -> .)

    elseiflist                     shift and go to state 150
    empty                          shift and go to state 151

state 146

    (37) stmt -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (30) cases -> cases . case
    (29) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 152
    WHERE           shift and go to state 154

    case                           shift and go to state 153

state 147

    (31) cases -> empty .

    RCB             reduce using rule 31 (cases -> empty .)
    WHERE           reduce using rule 31 (cases -> empty .)


state 148

    (38) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 155
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 149

    (39) stmt -> FOR LRB ID IN ID RRB . stmt
    (32) stmt -> . RETURN exp SEMICOLON
    (33) stmt -> . exp SEMICOLON
    (34) stmt -> . block
    (35) stmt -> . vardec
    (36) stmt -> . WHILE LRB exp RRB stmt
    (37) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (38) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> . FOR LRB ID IN ID RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (42) stmt -> . PRINT LRB ID RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 103
    PRINT           shift and go to state 104
    ID              shift and go to state 102
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    stmt                           shift and go to state 156
    exp                            shift and go to state 96
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 150

    (40) stmt -> IF LRB exp RRB stmt elseiflist .
    (41) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (43) elseiflist -> elseiflist . ELSEIF LRB exp RRB stmt

    RCB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSEIF          reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)

  ! ELSE            [ shift and go to state 157 ]
  ! ELSEIF          [ shift and go to state 158 ]


state 151

    (44) elseiflist -> empty .

    RCB             reduce using rule 44 (elseiflist -> empty .)
    RETURN          reduce using rule 44 (elseiflist -> empty .)
    WHILE           reduce using rule 44 (elseiflist -> empty .)
    ON              reduce using rule 44 (elseiflist -> empty .)
    FOR             reduce using rule 44 (elseiflist -> empty .)
    IF              reduce using rule 44 (elseiflist -> empty .)
    PRINT           reduce using rule 44 (elseiflist -> empty .)
    ID              reduce using rule 44 (elseiflist -> empty .)
    LRB             reduce using rule 44 (elseiflist -> empty .)
    SUB             reduce using rule 44 (elseiflist -> empty .)
    NOT             reduce using rule 44 (elseiflist -> empty .)
    LCB             reduce using rule 44 (elseiflist -> empty .)
    INTEGERNUMBER   reduce using rule 44 (elseiflist -> empty .)
    FLOATNUMBER     reduce using rule 44 (elseiflist -> empty .)
    TRUE            reduce using rule 44 (elseiflist -> empty .)
    FALSE           reduce using rule 44 (elseiflist -> empty .)
    ELSE            reduce using rule 44 (elseiflist -> empty .)
    ELSEIF          reduce using rule 44 (elseiflist -> empty .)
    WHERE           reduce using rule 44 (elseiflist -> empty .)


state 152

    (37) stmt -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 159


state 153

    (30) cases -> cases case .

    RCB             reduce using rule 30 (cases -> cases case .)
    WHERE           reduce using rule 30 (cases -> cases case .)


state 154

    (29) case -> WHERE . const COLON stmtlist
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    const                          shift and go to state 160

state 155

    (38) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RRB             shift and go to state 161
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 156

    (39) stmt -> FOR LRB ID IN ID RRB stmt .

    RCB             reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    RETURN          reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHILE           reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ON              reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FOR             reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    IF              reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    PRINT           reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ID              reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LRB             reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    SUB             reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    NOT             reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LCB             reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    INTEGERNUMBER   reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FLOATNUMBER     reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    TRUE            reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FALSE           reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSE            reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSEIF          reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHERE           reduce using rule 39 (stmt -> FOR LRB ID IN ID RRB stmt .)


state 157

    (41) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (32) stmt -> . RETURN exp SEMICOLON
    (33) stmt -> . exp SEMICOLON
    (34) stmt -> . block
    (35) stmt -> . vardec
    (36) stmt -> . WHILE LRB exp RRB stmt
    (37) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (38) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> . FOR LRB ID IN ID RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (42) stmt -> . PRINT LRB ID RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 103
    PRINT           shift and go to state 104
    ID              shift and go to state 102
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 162
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 158

    (43) elseiflist -> elseiflist ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 163


state 159

    (37) stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 37 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 160

    (29) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 164


state 161

    (38) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (32) stmt -> . RETURN exp SEMICOLON
    (33) stmt -> . exp SEMICOLON
    (34) stmt -> . block
    (35) stmt -> . vardec
    (36) stmt -> . WHILE LRB exp RRB stmt
    (37) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (38) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> . FOR LRB ID IN ID RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (42) stmt -> . PRINT LRB ID RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 103
    PRINT           shift and go to state 104
    ID              shift and go to state 102
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 165
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 162

    (41) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ON              reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSEIF          reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHERE           reduce using rule 41 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 163

    (43) elseiflist -> elseiflist ELSEIF LRB . exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 166
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32

state 164

    (29) case -> WHERE const COLON . stmtlist
    (25) stmtlist -> . stmtlist stmt
    (26) stmtlist -> . empty
    (75) empty -> .

    RETURN          reduce using rule 75 (empty -> .)
    WHILE           reduce using rule 75 (empty -> .)
    ON              reduce using rule 75 (empty -> .)
    FOR             reduce using rule 75 (empty -> .)
    IF              reduce using rule 75 (empty -> .)
    PRINT           reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    LRB             reduce using rule 75 (empty -> .)
    SUB             reduce using rule 75 (empty -> .)
    NOT             reduce using rule 75 (empty -> .)
    LCB             reduce using rule 75 (empty -> .)
    INTEGERNUMBER   reduce using rule 75 (empty -> .)
    FLOATNUMBER     reduce using rule 75 (empty -> .)
    TRUE            reduce using rule 75 (empty -> .)
    FALSE           reduce using rule 75 (empty -> .)
    RCB             reduce using rule 75 (empty -> .)
    WHERE           reduce using rule 75 (empty -> .)

    stmtlist                       shift and go to state 167
    empty                          shift and go to state 73

state 165

    (38) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 38 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 166

    (43) elseiflist -> elseiflist ELSEIF LRB exp . RRB stmt
    (48) exp -> exp . AND exp
    (49) exp -> exp . OR exp
    (50) exp -> exp . SUM exp
    (51) exp -> exp . SUB exp
    (52) exp -> exp . MUL exp
    (53) exp -> exp . DIV exp
    (54) exp -> exp . MOD exp
    (45) relopexp -> exp . relop exp
    (67) relop -> . GT
    (68) relop -> . LT
    (69) relop -> . NE
    (70) relop -> . EQ
    (71) relop -> . LE
    (72) relop -> . GE

    RRB             shift and go to state 168
    AND             shift and go to state 52
    OR              shift and go to state 53
    SUM             shift and go to state 54
    SUB             shift and go to state 55
    MUL             shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    GT              shift and go to state 60
    LT              shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relop                          shift and go to state 59

state 167

    (29) case -> WHERE const COLON stmtlist .
    (25) stmtlist -> stmtlist . stmt
    (32) stmt -> . RETURN exp SEMICOLON
    (33) stmt -> . exp SEMICOLON
    (34) stmt -> . block
    (35) stmt -> . vardec
    (36) stmt -> . WHILE LRB exp RRB stmt
    (37) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (38) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> . FOR LRB ID IN ID RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (42) stmt -> . PRINT LRB ID RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RCB             reduce using rule 29 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 29 (case -> WHERE const COLON stmtlist .)
    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 103
    PRINT           shift and go to state 104
    ID              shift and go to state 102
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    const                          shift and go to state 32
    stmt                           shift and go to state 94
    exp                            shift and go to state 96
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 168

    (43) elseiflist -> elseiflist ELSEIF LRB exp RRB . stmt
    (32) stmt -> . RETURN exp SEMICOLON
    (33) stmt -> . exp SEMICOLON
    (34) stmt -> . block
    (35) stmt -> . vardec
    (36) stmt -> . WHILE LRB exp RRB stmt
    (37) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (38) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (39) stmt -> . FOR LRB ID IN ID RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (42) stmt -> . PRINT LRB ID RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp AND exp
    (49) exp -> . exp OR exp
    (50) exp -> . exp SUM exp
    (51) exp -> . exp SUB exp
    (52) exp -> . exp MUL exp
    (53) exp -> . exp DIV exp
    (54) exp -> . exp MOD exp
    (55) exp -> . relopexp
    (56) exp -> . const
    (57) exp -> . lvalue
    (58) exp -> . ID LRB explist RRB
    (59) exp -> . LRB exp RRB
    (60) exp -> . ID LRB RRB
    (61) exp -> . SUB exp
    (62) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (27) lvalue -> . ID
    (28) lvalue -> . ID LSB exp RSB
    (45) relopexp -> . exp relop exp
    (46) relopexp -> . relopexp relop exp
    (63) const -> . INTEGERNUMBER
    (64) const -> . FLOATNUMBER
    (65) const -> . TRUE
    (66) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 103
    PRINT           shift and go to state 104
    ID              shift and go to state 102
    LRB             shift and go to state 33
    SUB             shift and go to state 30
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 169
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 29
    relopexp                       shift and go to state 31
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 169

    (43) elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GT in state 31 resolved as shift
WARNING: shift/reduce conflict for LT in state 31 resolved as shift
WARNING: shift/reduce conflict for NE in state 31 resolved as shift
WARNING: shift/reduce conflict for EQ in state 31 resolved as shift
WARNING: shift/reduce conflict for LE in state 31 resolved as shift
WARNING: shift/reduce conflict for GE in state 31 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for SUM in state 70 resolved as shift
WARNING: shift/reduce conflict for SUB in state 70 resolved as shift
WARNING: shift/reduce conflict for MUL in state 70 resolved as shift
WARNING: shift/reduce conflict for DIV in state 70 resolved as shift
WARNING: shift/reduce conflict for MOD in state 70 resolved as shift
WARNING: shift/reduce conflict for GT in state 70 resolved as shift
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for NE in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for LE in state 70 resolved as shift
WARNING: shift/reduce conflict for GE in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for SUM in state 89 resolved as shift
WARNING: shift/reduce conflict for SUB in state 89 resolved as shift
WARNING: shift/reduce conflict for MUL in state 89 resolved as shift
WARNING: shift/reduce conflict for DIV in state 89 resolved as shift
WARNING: shift/reduce conflict for MOD in state 89 resolved as shift
WARNING: shift/reduce conflict for GT in state 89 resolved as shift
WARNING: shift/reduce conflict for LT in state 89 resolved as shift
WARNING: shift/reduce conflict for NE in state 89 resolved as shift
WARNING: shift/reduce conflict for EQ in state 89 resolved as shift
WARNING: shift/reduce conflict for LE in state 89 resolved as shift
WARNING: shift/reduce conflict for GE in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for SUM in state 91 resolved as shift
WARNING: shift/reduce conflict for SUB in state 91 resolved as shift
WARNING: shift/reduce conflict for MUL in state 91 resolved as shift
WARNING: shift/reduce conflict for DIV in state 91 resolved as shift
WARNING: shift/reduce conflict for MOD in state 91 resolved as shift
WARNING: shift/reduce conflict for GT in state 91 resolved as shift
WARNING: shift/reduce conflict for LT in state 91 resolved as shift
WARNING: shift/reduce conflict for NE in state 91 resolved as shift
WARNING: shift/reduce conflict for EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for LE in state 91 resolved as shift
WARNING: shift/reduce conflict for GE in state 91 resolved as shift
