Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     program -> MAIN LRB RRB block
Rule 3     declist -> dec
Rule 4     declist -> declist dec
Rule 5     dec -> vardec
Rule 6     dec -> funcdec
Rule 7     type -> INTEGER
Rule 8     type -> FLOAT
Rule 9     type -> BOOLEAN
Rule 10    iddec -> lvalue
Rule 11    iddec -> lvalue ASSIGN exp
Rule 12    idlist -> iddec
Rule 13    idlist -> idlist COMMA iddec
Rule 14    vardec -> idlist COLON type SEMICOLON
Rule 15    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 16    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 17    paramdecs -> paramdecslist
Rule 18    paramdecs -> empty
Rule 19    paramdecslist -> paramdec
Rule 20    paramdecslist -> paramdecslist COMMA paramdec
Rule 21    paramdec -> ID COLON type
Rule 22    paramdec -> ID LSB RSB COLON type
Rule 23    block -> LCB stmtlist RCB
Rule 24    stmtlist -> stmtlist stmt
Rule 25    stmtlist -> empty
Rule 26    lvalue -> ID
Rule 27    lvalue -> ID LSB exp RSB
Rule 28    case -> WHERE const COLON stmtlist
Rule 29    cases -> cases case
Rule 30    cases -> empty
Rule 31    stmt -> RETURN exp SEMICOLON
Rule 32    stmt -> exp SEMICOLON
Rule 33    stmt -> block
Rule 34    stmt -> vardec
Rule 35    stmt -> WHILE LRB exp RRB stmt
Rule 36    stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 37    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 38    stmt -> FOR LRB ID IN ID RRB stmt
Rule 39    stmt -> IF LRB exp RRB stmt elseiflist
Rule 40    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 41    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 42    elseiflist -> elseiflist ELSEIF LRB exp RRB stmt
Rule 43    elseiflist -> empty
Rule 44    exp -> lvalue ASSIGN exp
Rule 45    exp -> exp GT exp
Rule 46    exp -> exp LT exp
Rule 47    exp -> exp NE exp
Rule 48    exp -> exp EQ exp
Rule 49    exp -> exp LE exp
Rule 50    exp -> exp GE exp
Rule 51    exp -> exp AND exp
Rule 52    exp -> exp OR exp
Rule 53    exp -> exp SUM exp
Rule 54    exp -> exp SUB exp
Rule 55    exp -> exp MUL exp
Rule 56    exp -> exp DIV exp
Rule 57    exp -> exp MOD exp
Rule 58    exp -> const
Rule 59    exp -> lvalue
Rule 60    exp -> ID LRB explist RRB
Rule 61    exp -> LRB exp RRB
Rule 62    exp -> ID LRB RRB
Rule 63    exp -> SUB exp
Rule 64    exp -> NOT exp
Rule 65    const -> INTEGERNUMBER
Rule 66    const -> FLOATNUMBER
Rule 67    const -> TRUE
Rule 68    const -> FALSE
Rule 69    explist -> exp
Rule 70    explist -> explist COMMA exp
Rule 71    empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
ASSIGN               : 11 44
BOOLEAN              : 9
COLON                : 14 15 21 22 28
COMMA                : 13 20 70
DIV                  : 56
ELSE                 : 40
ELSEIF               : 42
EQ                   : 48
ERROR                : 
FALSE                : 68
FLOAT                : 8
FLOATNUMBER          : 66
FOR                  : 37 38
FUNCTION             : 15 16
GE                   : 50
GT                   : 45
ID                   : 15 16 21 22 26 27 38 38 41 60 62
IF                   : 39 40
IN                   : 38
INTEGER              : 7
INTEGERNUMBER        : 65
LCB                  : 23 36
LE                   : 49
LRB                  : 1 2 15 16 35 36 37 38 39 40 41 42 60 61 62
LSB                  : 22 27
LT                   : 46
MAIN                 : 1 2
MOD                  : 57
MUL                  : 55
NE                   : 47
NOT                  : 64
ON                   : 36
OR                   : 52
PRINT                : 41
RCB                  : 23 36
RETURN               : 31
RRB                  : 1 2 15 16 35 36 37 38 39 40 41 42 60 61 62
RSB                  : 22 27
SEMICOLON            : 14 31 32 36 37 37 41
SUB                  : 54 63
SUM                  : 53
TRUE                 : 67
WHERE                : 28
WHILE                : 35
error                : 

Nonterminals, with rules where they appear

block                : 1 2 15 16 33
case                 : 29
cases                : 29 36
const                : 28 58
dec                  : 3 4
declist              : 1 4
elseiflist           : 39 40 42
empty                : 18 25 30 43
exp                  : 11 27 31 32 35 36 37 37 37 39 40 42 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 61 63 64 69 70
explist              : 60 70
funcdec              : 6
iddec                : 12 13
idlist               : 13 14
lvalue               : 10 11 44 59
paramdec             : 19 20
paramdecs            : 15 16
paramdecslist        : 17 20
program              : 0
stmt                 : 24 35 37 38 39 40 40 42
stmtlist             : 23 24 28
type                 : 14 15 21 22
vardec               : 5 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) program -> . MAIN LRB RRB block
    (3) declist -> . dec
    (4) declist -> . declist dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (14) vardec -> . idlist COLON type SEMICOLON
    (15) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB

    MAIN            shift and go to state 3
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    program                        shift and go to state 1
    declist                        shift and go to state 2
    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10
    lvalue                         shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (4) declist -> declist . dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (14) vardec -> . idlist COLON type SEMICOLON
    (15) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB

    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    dec                            shift and go to state 13
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10
    lvalue                         shift and go to state 11

state 3

    (2) program -> MAIN . LRB RRB block

    LRB             shift and go to state 14


state 4

    (3) declist -> dec .

    MAIN            reduce using rule 3 (declist -> dec .)
    FUNCTION        reduce using rule 3 (declist -> dec .)
    ID              reduce using rule 3 (declist -> dec .)


state 5

    (5) dec -> vardec .

    MAIN            reduce using rule 5 (dec -> vardec .)
    FUNCTION        reduce using rule 5 (dec -> vardec .)
    ID              reduce using rule 5 (dec -> vardec .)


state 6

    (6) dec -> funcdec .

    MAIN            reduce using rule 6 (dec -> funcdec .)
    FUNCTION        reduce using rule 6 (dec -> funcdec .)
    ID              reduce using rule 6 (dec -> funcdec .)


state 7

    (14) vardec -> idlist . COLON type SEMICOLON
    (13) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 15
    COMMA           shift and go to state 16


state 8

    (15) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (16) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 17


state 9

    (26) lvalue -> ID .
    (27) lvalue -> ID . LSB exp RSB

    ASSIGN          reduce using rule 26 (lvalue -> ID .)
    COLON           reduce using rule 26 (lvalue -> ID .)
    COMMA           reduce using rule 26 (lvalue -> ID .)
    LSB             shift and go to state 18


state 10

    (12) idlist -> iddec .

    COLON           reduce using rule 12 (idlist -> iddec .)
    COMMA           reduce using rule 12 (idlist -> iddec .)


state 11

    (10) iddec -> lvalue .
    (11) iddec -> lvalue . ASSIGN exp

    COLON           reduce using rule 10 (iddec -> lvalue .)
    COMMA           reduce using rule 10 (iddec -> lvalue .)
    ASSIGN          shift and go to state 19


state 12

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 20


state 13

    (4) declist -> declist dec .

    MAIN            reduce using rule 4 (declist -> declist dec .)
    FUNCTION        reduce using rule 4 (declist -> declist dec .)
    ID              reduce using rule 4 (declist -> declist dec .)


state 14

    (2) program -> MAIN LRB . RRB block

    RRB             shift and go to state 21


state 15

    (14) vardec -> idlist COLON . type SEMICOLON
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 22

state 16

    (13) idlist -> idlist COMMA . iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 9

    iddec                          shift and go to state 26
    lvalue                         shift and go to state 11

state 17

    (15) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (16) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 27


state 18

    (27) lvalue -> ID LSB . exp RSB
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 29
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 19

    (11) iddec -> lvalue ASSIGN . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    lvalue                         shift and go to state 30
    exp                            shift and go to state 39
    const                          shift and go to state 32

state 20

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 40


state 21

    (2) program -> MAIN LRB RRB . block
    (23) block -> . LCB stmtlist RCB

    LCB             shift and go to state 42

    block                          shift and go to state 41

state 22

    (14) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 43


state 23

    (7) type -> INTEGER .

    SEMICOLON       reduce using rule 7 (type -> INTEGER .)
    COMMA           reduce using rule 7 (type -> INTEGER .)
    RRB             reduce using rule 7 (type -> INTEGER .)
    LCB             reduce using rule 7 (type -> INTEGER .)


state 24

    (8) type -> FLOAT .

    SEMICOLON       reduce using rule 8 (type -> FLOAT .)
    COMMA           reduce using rule 8 (type -> FLOAT .)
    RRB             reduce using rule 8 (type -> FLOAT .)
    LCB             reduce using rule 8 (type -> FLOAT .)


state 25

    (9) type -> BOOLEAN .

    SEMICOLON       reduce using rule 9 (type -> BOOLEAN .)
    COMMA           reduce using rule 9 (type -> BOOLEAN .)
    RRB             reduce using rule 9 (type -> BOOLEAN .)
    LCB             reduce using rule 9 (type -> BOOLEAN .)


state 26

    (13) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 13 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 13 (idlist -> idlist COMMA iddec .)


state 27

    (15) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (16) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (17) paramdecs -> . paramdecslist
    (18) paramdecs -> . empty
    (19) paramdecslist -> . paramdec
    (20) paramdecslist -> . paramdecslist COMMA paramdec
    (71) empty -> .
    (21) paramdec -> . ID COLON type
    (22) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 71 (empty -> .)
    ID              shift and go to state 44

    paramdecs                      shift and go to state 45
    paramdecslist                  shift and go to state 46
    empty                          shift and go to state 47
    paramdec                       shift and go to state 48

state 28

    (60) exp -> ID . LRB explist RRB
    (62) exp -> ID . LRB RRB
    (26) lvalue -> ID .
    (27) lvalue -> ID . LSB exp RSB

    LRB             shift and go to state 49
    ASSIGN          reduce using rule 26 (lvalue -> ID .)
    RSB             reduce using rule 26 (lvalue -> ID .)
    GT              reduce using rule 26 (lvalue -> ID .)
    LT              reduce using rule 26 (lvalue -> ID .)
    NE              reduce using rule 26 (lvalue -> ID .)
    EQ              reduce using rule 26 (lvalue -> ID .)
    LE              reduce using rule 26 (lvalue -> ID .)
    GE              reduce using rule 26 (lvalue -> ID .)
    AND             reduce using rule 26 (lvalue -> ID .)
    OR              reduce using rule 26 (lvalue -> ID .)
    SUM             reduce using rule 26 (lvalue -> ID .)
    SUB             reduce using rule 26 (lvalue -> ID .)
    MUL             reduce using rule 26 (lvalue -> ID .)
    DIV             reduce using rule 26 (lvalue -> ID .)
    MOD             reduce using rule 26 (lvalue -> ID .)
    COLON           reduce using rule 26 (lvalue -> ID .)
    COMMA           reduce using rule 26 (lvalue -> ID .)
    RRB             reduce using rule 26 (lvalue -> ID .)
    SEMICOLON       reduce using rule 26 (lvalue -> ID .)
    LSB             shift and go to state 18


state 29

    (27) lvalue -> ID LSB exp . RSB
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             shift and go to state 50
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 30

    (44) exp -> lvalue . ASSIGN exp
    (59) exp -> lvalue .

    ASSIGN          shift and go to state 64
    RSB             reduce using rule 59 (exp -> lvalue .)
    GT              reduce using rule 59 (exp -> lvalue .)
    LT              reduce using rule 59 (exp -> lvalue .)
    NE              reduce using rule 59 (exp -> lvalue .)
    EQ              reduce using rule 59 (exp -> lvalue .)
    LE              reduce using rule 59 (exp -> lvalue .)
    GE              reduce using rule 59 (exp -> lvalue .)
    AND             reduce using rule 59 (exp -> lvalue .)
    OR              reduce using rule 59 (exp -> lvalue .)
    SUM             reduce using rule 59 (exp -> lvalue .)
    SUB             reduce using rule 59 (exp -> lvalue .)
    MUL             reduce using rule 59 (exp -> lvalue .)
    DIV             reduce using rule 59 (exp -> lvalue .)
    MOD             reduce using rule 59 (exp -> lvalue .)
    COLON           reduce using rule 59 (exp -> lvalue .)
    COMMA           reduce using rule 59 (exp -> lvalue .)
    RRB             reduce using rule 59 (exp -> lvalue .)
    SEMICOLON       reduce using rule 59 (exp -> lvalue .)


state 31

    (63) exp -> SUB . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 65
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 32

    (58) exp -> const .

    RSB             reduce using rule 58 (exp -> const .)
    GT              reduce using rule 58 (exp -> const .)
    LT              reduce using rule 58 (exp -> const .)
    NE              reduce using rule 58 (exp -> const .)
    EQ              reduce using rule 58 (exp -> const .)
    LE              reduce using rule 58 (exp -> const .)
    GE              reduce using rule 58 (exp -> const .)
    AND             reduce using rule 58 (exp -> const .)
    OR              reduce using rule 58 (exp -> const .)
    SUM             reduce using rule 58 (exp -> const .)
    SUB             reduce using rule 58 (exp -> const .)
    MUL             reduce using rule 58 (exp -> const .)
    DIV             reduce using rule 58 (exp -> const .)
    MOD             reduce using rule 58 (exp -> const .)
    COLON           reduce using rule 58 (exp -> const .)
    COMMA           reduce using rule 58 (exp -> const .)
    RRB             reduce using rule 58 (exp -> const .)
    SEMICOLON       reduce using rule 58 (exp -> const .)


state 33

    (61) exp -> LRB . exp RRB
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 66
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 34

    (64) exp -> NOT . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 67
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 35

    (65) const -> INTEGERNUMBER .

    RSB             reduce using rule 65 (const -> INTEGERNUMBER .)
    GT              reduce using rule 65 (const -> INTEGERNUMBER .)
    LT              reduce using rule 65 (const -> INTEGERNUMBER .)
    NE              reduce using rule 65 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 65 (const -> INTEGERNUMBER .)
    LE              reduce using rule 65 (const -> INTEGERNUMBER .)
    GE              reduce using rule 65 (const -> INTEGERNUMBER .)
    AND             reduce using rule 65 (const -> INTEGERNUMBER .)
    OR              reduce using rule 65 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 65 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 65 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 65 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 65 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 65 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 65 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 65 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 65 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 65 (const -> INTEGERNUMBER .)


state 36

    (66) const -> FLOATNUMBER .

    RSB             reduce using rule 66 (const -> FLOATNUMBER .)
    GT              reduce using rule 66 (const -> FLOATNUMBER .)
    LT              reduce using rule 66 (const -> FLOATNUMBER .)
    NE              reduce using rule 66 (const -> FLOATNUMBER .)
    EQ              reduce using rule 66 (const -> FLOATNUMBER .)
    LE              reduce using rule 66 (const -> FLOATNUMBER .)
    GE              reduce using rule 66 (const -> FLOATNUMBER .)
    AND             reduce using rule 66 (const -> FLOATNUMBER .)
    OR              reduce using rule 66 (const -> FLOATNUMBER .)
    SUM             reduce using rule 66 (const -> FLOATNUMBER .)
    SUB             reduce using rule 66 (const -> FLOATNUMBER .)
    MUL             reduce using rule 66 (const -> FLOATNUMBER .)
    DIV             reduce using rule 66 (const -> FLOATNUMBER .)
    MOD             reduce using rule 66 (const -> FLOATNUMBER .)
    COLON           reduce using rule 66 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 66 (const -> FLOATNUMBER .)
    RRB             reduce using rule 66 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 66 (const -> FLOATNUMBER .)


state 37

    (67) const -> TRUE .

    RSB             reduce using rule 67 (const -> TRUE .)
    GT              reduce using rule 67 (const -> TRUE .)
    LT              reduce using rule 67 (const -> TRUE .)
    NE              reduce using rule 67 (const -> TRUE .)
    EQ              reduce using rule 67 (const -> TRUE .)
    LE              reduce using rule 67 (const -> TRUE .)
    GE              reduce using rule 67 (const -> TRUE .)
    AND             reduce using rule 67 (const -> TRUE .)
    OR              reduce using rule 67 (const -> TRUE .)
    SUM             reduce using rule 67 (const -> TRUE .)
    SUB             reduce using rule 67 (const -> TRUE .)
    MUL             reduce using rule 67 (const -> TRUE .)
    DIV             reduce using rule 67 (const -> TRUE .)
    MOD             reduce using rule 67 (const -> TRUE .)
    COLON           reduce using rule 67 (const -> TRUE .)
    COMMA           reduce using rule 67 (const -> TRUE .)
    RRB             reduce using rule 67 (const -> TRUE .)
    SEMICOLON       reduce using rule 67 (const -> TRUE .)


state 38

    (68) const -> FALSE .

    RSB             reduce using rule 68 (const -> FALSE .)
    GT              reduce using rule 68 (const -> FALSE .)
    LT              reduce using rule 68 (const -> FALSE .)
    NE              reduce using rule 68 (const -> FALSE .)
    EQ              reduce using rule 68 (const -> FALSE .)
    LE              reduce using rule 68 (const -> FALSE .)
    GE              reduce using rule 68 (const -> FALSE .)
    AND             reduce using rule 68 (const -> FALSE .)
    OR              reduce using rule 68 (const -> FALSE .)
    SUM             reduce using rule 68 (const -> FALSE .)
    SUB             reduce using rule 68 (const -> FALSE .)
    MUL             reduce using rule 68 (const -> FALSE .)
    DIV             reduce using rule 68 (const -> FALSE .)
    MOD             reduce using rule 68 (const -> FALSE .)
    COLON           reduce using rule 68 (const -> FALSE .)
    COMMA           reduce using rule 68 (const -> FALSE .)
    RRB             reduce using rule 68 (const -> FALSE .)
    SEMICOLON       reduce using rule 68 (const -> FALSE .)


state 39

    (11) iddec -> lvalue ASSIGN exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    COLON           reduce using rule 11 (iddec -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 11 (iddec -> lvalue ASSIGN exp .)
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 40

    (1) program -> declist MAIN LRB RRB . block
    (23) block -> . LCB stmtlist RCB

    LCB             shift and go to state 42

    block                          shift and go to state 68

state 41

    (2) program -> MAIN LRB RRB block .

    $end            reduce using rule 2 (program -> MAIN LRB RRB block .)


state 42

    (23) block -> LCB . stmtlist RCB
    (24) stmtlist -> . stmtlist stmt
    (25) stmtlist -> . empty
    (71) empty -> .

    RCB             reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    ON              reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    PRINT           reduce using rule 71 (empty -> .)
    ID              reduce using rule 71 (empty -> .)
    LRB             reduce using rule 71 (empty -> .)
    SUB             reduce using rule 71 (empty -> .)
    NOT             reduce using rule 71 (empty -> .)
    LCB             reduce using rule 71 (empty -> .)
    INTEGERNUMBER   reduce using rule 71 (empty -> .)
    FLOATNUMBER     reduce using rule 71 (empty -> .)
    TRUE            reduce using rule 71 (empty -> .)
    FALSE           reduce using rule 71 (empty -> .)

    stmtlist                       shift and go to state 69
    empty                          shift and go to state 70

state 43

    (14) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)


state 44

    (21) paramdec -> ID . COLON type
    (22) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 71
    LSB             shift and go to state 72


state 45

    (15) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (16) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 73


state 46

    (17) paramdecs -> paramdecslist .
    (20) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 17 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 74


state 47

    (18) paramdecs -> empty .

    RRB             reduce using rule 18 (paramdecs -> empty .)


state 48

    (19) paramdecslist -> paramdec .

    COMMA           reduce using rule 19 (paramdecslist -> paramdec .)
    RRB             reduce using rule 19 (paramdecslist -> paramdec .)


state 49

    (60) exp -> ID LRB . explist RRB
    (62) exp -> ID LRB . RRB
    (69) explist -> . exp
    (70) explist -> . explist COMMA exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    RRB             shift and go to state 76
    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    explist                        shift and go to state 75
    exp                            shift and go to state 77
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 50

    (27) lvalue -> ID LSB exp RSB .

    ASSIGN          reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 27 (lvalue -> ID LSB exp RSB .)


state 51

    (45) exp -> exp GT . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 78
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 52

    (46) exp -> exp LT . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 79
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 53

    (47) exp -> exp NE . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 80
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 54

    (48) exp -> exp EQ . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 81
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 55

    (49) exp -> exp LE . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 82
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 56

    (50) exp -> exp GE . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 83
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 57

    (51) exp -> exp AND . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 84
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 58

    (52) exp -> exp OR . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 85
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 59

    (53) exp -> exp SUM . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 86
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 60

    (54) exp -> exp SUB . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 87
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 61

    (55) exp -> exp MUL . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 88
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 62

    (56) exp -> exp DIV . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 89
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 63

    (57) exp -> exp MOD . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 90
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 64

    (44) exp -> lvalue ASSIGN . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    lvalue                         shift and go to state 30
    exp                            shift and go to state 91
    const                          shift and go to state 32

state 65

    (63) exp -> SUB exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 63 (exp -> SUB exp .)
    GT              reduce using rule 63 (exp -> SUB exp .)
    LT              reduce using rule 63 (exp -> SUB exp .)
    NE              reduce using rule 63 (exp -> SUB exp .)
    EQ              reduce using rule 63 (exp -> SUB exp .)
    LE              reduce using rule 63 (exp -> SUB exp .)
    GE              reduce using rule 63 (exp -> SUB exp .)
    AND             reduce using rule 63 (exp -> SUB exp .)
    OR              reduce using rule 63 (exp -> SUB exp .)
    SUM             reduce using rule 63 (exp -> SUB exp .)
    SUB             reduce using rule 63 (exp -> SUB exp .)
    MOD             reduce using rule 63 (exp -> SUB exp .)
    COLON           reduce using rule 63 (exp -> SUB exp .)
    COMMA           reduce using rule 63 (exp -> SUB exp .)
    RRB             reduce using rule 63 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 63 (exp -> SUB exp .)
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! MUL             [ reduce using rule 63 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 63 (exp -> SUB exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 63 ]


state 66

    (61) exp -> LRB exp . RRB
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RRB             shift and go to state 92
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 67

    (64) exp -> NOT exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 64 (exp -> NOT exp .)
    AND             reduce using rule 64 (exp -> NOT exp .)
    OR              reduce using rule 64 (exp -> NOT exp .)
    COLON           reduce using rule 64 (exp -> NOT exp .)
    COMMA           reduce using rule 64 (exp -> NOT exp .)
    RRB             reduce using rule 64 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 64 (exp -> NOT exp .)
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63

  ! GT              [ reduce using rule 64 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 64 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 64 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 64 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 64 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 64 (exp -> NOT exp .) ]
  ! SUM             [ reduce using rule 64 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 64 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 64 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 64 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 64 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 68

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 69

    (23) block -> LCB stmtlist . RCB
    (24) stmtlist -> stmtlist . stmt
    (31) stmt -> . RETURN exp SEMICOLON
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . WHILE LRB exp RRB stmt
    (36) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (37) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> . FOR LRB ID IN ID RRB stmt
    (39) stmt -> . IF LRB exp RRB stmt elseiflist
    (40) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (41) stmt -> . PRINT LRB ID RRB SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp

    RCB             shift and go to state 93
    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 102
    PRINT           shift and go to state 103
    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    stmt                           shift and go to state 94
    exp                            shift and go to state 96
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 104
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 70

    (25) stmtlist -> empty .

    RCB             reduce using rule 25 (stmtlist -> empty .)
    RETURN          reduce using rule 25 (stmtlist -> empty .)
    WHILE           reduce using rule 25 (stmtlist -> empty .)
    ON              reduce using rule 25 (stmtlist -> empty .)
    FOR             reduce using rule 25 (stmtlist -> empty .)
    IF              reduce using rule 25 (stmtlist -> empty .)
    PRINT           reduce using rule 25 (stmtlist -> empty .)
    ID              reduce using rule 25 (stmtlist -> empty .)
    LRB             reduce using rule 25 (stmtlist -> empty .)
    SUB             reduce using rule 25 (stmtlist -> empty .)
    NOT             reduce using rule 25 (stmtlist -> empty .)
    LCB             reduce using rule 25 (stmtlist -> empty .)
    INTEGERNUMBER   reduce using rule 25 (stmtlist -> empty .)
    FLOATNUMBER     reduce using rule 25 (stmtlist -> empty .)
    TRUE            reduce using rule 25 (stmtlist -> empty .)
    FALSE           reduce using rule 25 (stmtlist -> empty .)
    WHERE           reduce using rule 25 (stmtlist -> empty .)


state 71

    (21) paramdec -> ID COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 105

state 72

    (22) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 106


state 73

    (15) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (16) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (23) block -> . LCB stmtlist RCB

    COLON           shift and go to state 107
    LCB             shift and go to state 42

    block                          shift and go to state 108

state 74

    (20) paramdecslist -> paramdecslist COMMA . paramdec
    (21) paramdec -> . ID COLON type
    (22) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 44

    paramdec                       shift and go to state 109

state 75

    (60) exp -> ID LRB explist . RRB
    (70) explist -> explist . COMMA exp

    RRB             shift and go to state 110
    COMMA           shift and go to state 111


state 76

    (62) exp -> ID LRB RRB .

    RSB             reduce using rule 62 (exp -> ID LRB RRB .)
    GT              reduce using rule 62 (exp -> ID LRB RRB .)
    LT              reduce using rule 62 (exp -> ID LRB RRB .)
    NE              reduce using rule 62 (exp -> ID LRB RRB .)
    EQ              reduce using rule 62 (exp -> ID LRB RRB .)
    LE              reduce using rule 62 (exp -> ID LRB RRB .)
    GE              reduce using rule 62 (exp -> ID LRB RRB .)
    AND             reduce using rule 62 (exp -> ID LRB RRB .)
    OR              reduce using rule 62 (exp -> ID LRB RRB .)
    SUM             reduce using rule 62 (exp -> ID LRB RRB .)
    SUB             reduce using rule 62 (exp -> ID LRB RRB .)
    MUL             reduce using rule 62 (exp -> ID LRB RRB .)
    DIV             reduce using rule 62 (exp -> ID LRB RRB .)
    MOD             reduce using rule 62 (exp -> ID LRB RRB .)
    COLON           reduce using rule 62 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 62 (exp -> ID LRB RRB .)
    RRB             reduce using rule 62 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 62 (exp -> ID LRB RRB .)


state 77

    (69) explist -> exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RRB             reduce using rule 69 (explist -> exp .)
    COMMA           reduce using rule 69 (explist -> exp .)
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 78

    (45) exp -> exp GT exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 45 (exp -> exp GT exp .)
    GT              reduce using rule 45 (exp -> exp GT exp .)
    LT              reduce using rule 45 (exp -> exp GT exp .)
    NE              reduce using rule 45 (exp -> exp GT exp .)
    EQ              reduce using rule 45 (exp -> exp GT exp .)
    LE              reduce using rule 45 (exp -> exp GT exp .)
    GE              reduce using rule 45 (exp -> exp GT exp .)
    AND             reduce using rule 45 (exp -> exp GT exp .)
    OR              reduce using rule 45 (exp -> exp GT exp .)
    COLON           reduce using rule 45 (exp -> exp GT exp .)
    COMMA           reduce using rule 45 (exp -> exp GT exp .)
    RRB             reduce using rule 45 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 45 (exp -> exp GT exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63

  ! SUM             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! SUB             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! MUL             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! DIV             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! MOD             [ reduce using rule 45 (exp -> exp GT exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 79

    (46) exp -> exp LT exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 46 (exp -> exp LT exp .)
    GT              reduce using rule 46 (exp -> exp LT exp .)
    LT              reduce using rule 46 (exp -> exp LT exp .)
    NE              reduce using rule 46 (exp -> exp LT exp .)
    EQ              reduce using rule 46 (exp -> exp LT exp .)
    LE              reduce using rule 46 (exp -> exp LT exp .)
    GE              reduce using rule 46 (exp -> exp LT exp .)
    AND             reduce using rule 46 (exp -> exp LT exp .)
    OR              reduce using rule 46 (exp -> exp LT exp .)
    COLON           reduce using rule 46 (exp -> exp LT exp .)
    COMMA           reduce using rule 46 (exp -> exp LT exp .)
    RRB             reduce using rule 46 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 46 (exp -> exp LT exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63

  ! SUM             [ reduce using rule 46 (exp -> exp LT exp .) ]
  ! SUB             [ reduce using rule 46 (exp -> exp LT exp .) ]
  ! MUL             [ reduce using rule 46 (exp -> exp LT exp .) ]
  ! DIV             [ reduce using rule 46 (exp -> exp LT exp .) ]
  ! MOD             [ reduce using rule 46 (exp -> exp LT exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 80

    (47) exp -> exp NE exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 47 (exp -> exp NE exp .)
    GT              reduce using rule 47 (exp -> exp NE exp .)
    LT              reduce using rule 47 (exp -> exp NE exp .)
    NE              reduce using rule 47 (exp -> exp NE exp .)
    EQ              reduce using rule 47 (exp -> exp NE exp .)
    LE              reduce using rule 47 (exp -> exp NE exp .)
    GE              reduce using rule 47 (exp -> exp NE exp .)
    AND             reduce using rule 47 (exp -> exp NE exp .)
    OR              reduce using rule 47 (exp -> exp NE exp .)
    COLON           reduce using rule 47 (exp -> exp NE exp .)
    COMMA           reduce using rule 47 (exp -> exp NE exp .)
    RRB             reduce using rule 47 (exp -> exp NE exp .)
    SEMICOLON       reduce using rule 47 (exp -> exp NE exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63

  ! SUM             [ reduce using rule 47 (exp -> exp NE exp .) ]
  ! SUB             [ reduce using rule 47 (exp -> exp NE exp .) ]
  ! MUL             [ reduce using rule 47 (exp -> exp NE exp .) ]
  ! DIV             [ reduce using rule 47 (exp -> exp NE exp .) ]
  ! MOD             [ reduce using rule 47 (exp -> exp NE exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 81

    (48) exp -> exp EQ exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 48 (exp -> exp EQ exp .)
    GT              reduce using rule 48 (exp -> exp EQ exp .)
    LT              reduce using rule 48 (exp -> exp EQ exp .)
    NE              reduce using rule 48 (exp -> exp EQ exp .)
    EQ              reduce using rule 48 (exp -> exp EQ exp .)
    LE              reduce using rule 48 (exp -> exp EQ exp .)
    GE              reduce using rule 48 (exp -> exp EQ exp .)
    AND             reduce using rule 48 (exp -> exp EQ exp .)
    OR              reduce using rule 48 (exp -> exp EQ exp .)
    COLON           reduce using rule 48 (exp -> exp EQ exp .)
    COMMA           reduce using rule 48 (exp -> exp EQ exp .)
    RRB             reduce using rule 48 (exp -> exp EQ exp .)
    SEMICOLON       reduce using rule 48 (exp -> exp EQ exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63

  ! SUM             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! SUB             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! MUL             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! DIV             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! MOD             [ reduce using rule 48 (exp -> exp EQ exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 82

    (49) exp -> exp LE exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 49 (exp -> exp LE exp .)
    GT              reduce using rule 49 (exp -> exp LE exp .)
    LT              reduce using rule 49 (exp -> exp LE exp .)
    NE              reduce using rule 49 (exp -> exp LE exp .)
    EQ              reduce using rule 49 (exp -> exp LE exp .)
    LE              reduce using rule 49 (exp -> exp LE exp .)
    GE              reduce using rule 49 (exp -> exp LE exp .)
    AND             reduce using rule 49 (exp -> exp LE exp .)
    OR              reduce using rule 49 (exp -> exp LE exp .)
    COLON           reduce using rule 49 (exp -> exp LE exp .)
    COMMA           reduce using rule 49 (exp -> exp LE exp .)
    RRB             reduce using rule 49 (exp -> exp LE exp .)
    SEMICOLON       reduce using rule 49 (exp -> exp LE exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63

  ! SUM             [ reduce using rule 49 (exp -> exp LE exp .) ]
  ! SUB             [ reduce using rule 49 (exp -> exp LE exp .) ]
  ! MUL             [ reduce using rule 49 (exp -> exp LE exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> exp LE exp .) ]
  ! MOD             [ reduce using rule 49 (exp -> exp LE exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 83

    (50) exp -> exp GE exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 50 (exp -> exp GE exp .)
    GT              reduce using rule 50 (exp -> exp GE exp .)
    LT              reduce using rule 50 (exp -> exp GE exp .)
    NE              reduce using rule 50 (exp -> exp GE exp .)
    EQ              reduce using rule 50 (exp -> exp GE exp .)
    LE              reduce using rule 50 (exp -> exp GE exp .)
    GE              reduce using rule 50 (exp -> exp GE exp .)
    AND             reduce using rule 50 (exp -> exp GE exp .)
    OR              reduce using rule 50 (exp -> exp GE exp .)
    COLON           reduce using rule 50 (exp -> exp GE exp .)
    COMMA           reduce using rule 50 (exp -> exp GE exp .)
    RRB             reduce using rule 50 (exp -> exp GE exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp GE exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63

  ! SUM             [ reduce using rule 50 (exp -> exp GE exp .) ]
  ! SUB             [ reduce using rule 50 (exp -> exp GE exp .) ]
  ! MUL             [ reduce using rule 50 (exp -> exp GE exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> exp GE exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> exp GE exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 84

    (51) exp -> exp AND exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 51 (exp -> exp AND exp .)
    AND             reduce using rule 51 (exp -> exp AND exp .)
    OR              reduce using rule 51 (exp -> exp AND exp .)
    COLON           reduce using rule 51 (exp -> exp AND exp .)
    COMMA           reduce using rule 51 (exp -> exp AND exp .)
    RRB             reduce using rule 51 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp AND exp .)
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63

  ! GT              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! EQ              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! LE              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! GE              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! SUM             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! SUB             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! MUL             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 85

    (52) exp -> exp OR exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 52 (exp -> exp OR exp .)
    OR              reduce using rule 52 (exp -> exp OR exp .)
    COLON           reduce using rule 52 (exp -> exp OR exp .)
    COMMA           reduce using rule 52 (exp -> exp OR exp .)
    RRB             reduce using rule 52 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp OR exp .)
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63

  ! GT              [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! LE              [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! GE              [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! SUM             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! SUB             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! MUL             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 58 ]


state 86

    (53) exp -> exp SUM exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 53 (exp -> exp SUM exp .)
    GT              reduce using rule 53 (exp -> exp SUM exp .)
    LT              reduce using rule 53 (exp -> exp SUM exp .)
    NE              reduce using rule 53 (exp -> exp SUM exp .)
    EQ              reduce using rule 53 (exp -> exp SUM exp .)
    LE              reduce using rule 53 (exp -> exp SUM exp .)
    GE              reduce using rule 53 (exp -> exp SUM exp .)
    AND             reduce using rule 53 (exp -> exp SUM exp .)
    OR              reduce using rule 53 (exp -> exp SUM exp .)
    SUM             reduce using rule 53 (exp -> exp SUM exp .)
    SUB             reduce using rule 53 (exp -> exp SUM exp .)
    MOD             reduce using rule 53 (exp -> exp SUM exp .)
    COLON           reduce using rule 53 (exp -> exp SUM exp .)
    COMMA           reduce using rule 53 (exp -> exp SUM exp .)
    RRB             reduce using rule 53 (exp -> exp SUM exp .)
    SEMICOLON       reduce using rule 53 (exp -> exp SUM exp .)
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! MUL             [ reduce using rule 53 (exp -> exp SUM exp .) ]
  ! DIV             [ reduce using rule 53 (exp -> exp SUM exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 63 ]


state 87

    (54) exp -> exp SUB exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 54 (exp -> exp SUB exp .)
    GT              reduce using rule 54 (exp -> exp SUB exp .)
    LT              reduce using rule 54 (exp -> exp SUB exp .)
    NE              reduce using rule 54 (exp -> exp SUB exp .)
    EQ              reduce using rule 54 (exp -> exp SUB exp .)
    LE              reduce using rule 54 (exp -> exp SUB exp .)
    GE              reduce using rule 54 (exp -> exp SUB exp .)
    AND             reduce using rule 54 (exp -> exp SUB exp .)
    OR              reduce using rule 54 (exp -> exp SUB exp .)
    SUM             reduce using rule 54 (exp -> exp SUB exp .)
    SUB             reduce using rule 54 (exp -> exp SUB exp .)
    MOD             reduce using rule 54 (exp -> exp SUB exp .)
    COLON           reduce using rule 54 (exp -> exp SUB exp .)
    COMMA           reduce using rule 54 (exp -> exp SUB exp .)
    RRB             reduce using rule 54 (exp -> exp SUB exp .)
    SEMICOLON       reduce using rule 54 (exp -> exp SUB exp .)
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! MUL             [ reduce using rule 54 (exp -> exp SUB exp .) ]
  ! DIV             [ reduce using rule 54 (exp -> exp SUB exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 63 ]


state 88

    (55) exp -> exp MUL exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 55 (exp -> exp MUL exp .)
    GT              reduce using rule 55 (exp -> exp MUL exp .)
    LT              reduce using rule 55 (exp -> exp MUL exp .)
    NE              reduce using rule 55 (exp -> exp MUL exp .)
    EQ              reduce using rule 55 (exp -> exp MUL exp .)
    LE              reduce using rule 55 (exp -> exp MUL exp .)
    GE              reduce using rule 55 (exp -> exp MUL exp .)
    AND             reduce using rule 55 (exp -> exp MUL exp .)
    OR              reduce using rule 55 (exp -> exp MUL exp .)
    SUM             reduce using rule 55 (exp -> exp MUL exp .)
    SUB             reduce using rule 55 (exp -> exp MUL exp .)
    MUL             reduce using rule 55 (exp -> exp MUL exp .)
    DIV             reduce using rule 55 (exp -> exp MUL exp .)
    MOD             reduce using rule 55 (exp -> exp MUL exp .)
    COLON           reduce using rule 55 (exp -> exp MUL exp .)
    COMMA           reduce using rule 55 (exp -> exp MUL exp .)
    RRB             reduce using rule 55 (exp -> exp MUL exp .)
    SEMICOLON       reduce using rule 55 (exp -> exp MUL exp .)

  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MUL             [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! MOD             [ shift and go to state 63 ]


state 89

    (56) exp -> exp DIV exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 56 (exp -> exp DIV exp .)
    GT              reduce using rule 56 (exp -> exp DIV exp .)
    LT              reduce using rule 56 (exp -> exp DIV exp .)
    NE              reduce using rule 56 (exp -> exp DIV exp .)
    EQ              reduce using rule 56 (exp -> exp DIV exp .)
    LE              reduce using rule 56 (exp -> exp DIV exp .)
    GE              reduce using rule 56 (exp -> exp DIV exp .)
    AND             reduce using rule 56 (exp -> exp DIV exp .)
    OR              reduce using rule 56 (exp -> exp DIV exp .)
    SUM             reduce using rule 56 (exp -> exp DIV exp .)
    SUB             reduce using rule 56 (exp -> exp DIV exp .)
    MUL             reduce using rule 56 (exp -> exp DIV exp .)
    DIV             reduce using rule 56 (exp -> exp DIV exp .)
    MOD             reduce using rule 56 (exp -> exp DIV exp .)
    COLON           reduce using rule 56 (exp -> exp DIV exp .)
    COMMA           reduce using rule 56 (exp -> exp DIV exp .)
    RRB             reduce using rule 56 (exp -> exp DIV exp .)
    SEMICOLON       reduce using rule 56 (exp -> exp DIV exp .)

  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MUL             [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! MOD             [ shift and go to state 63 ]


state 90

    (57) exp -> exp MOD exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 57 (exp -> exp MOD exp .)
    GT              reduce using rule 57 (exp -> exp MOD exp .)
    LT              reduce using rule 57 (exp -> exp MOD exp .)
    NE              reduce using rule 57 (exp -> exp MOD exp .)
    EQ              reduce using rule 57 (exp -> exp MOD exp .)
    LE              reduce using rule 57 (exp -> exp MOD exp .)
    GE              reduce using rule 57 (exp -> exp MOD exp .)
    AND             reduce using rule 57 (exp -> exp MOD exp .)
    OR              reduce using rule 57 (exp -> exp MOD exp .)
    MOD             reduce using rule 57 (exp -> exp MOD exp .)
    COLON           reduce using rule 57 (exp -> exp MOD exp .)
    COMMA           reduce using rule 57 (exp -> exp MOD exp .)
    RRB             reduce using rule 57 (exp -> exp MOD exp .)
    SEMICOLON       reduce using rule 57 (exp -> exp MOD exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! SUM             [ reduce using rule 57 (exp -> exp MOD exp .) ]
  ! SUB             [ reduce using rule 57 (exp -> exp MOD exp .) ]
  ! MUL             [ reduce using rule 57 (exp -> exp MOD exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> exp MOD exp .) ]
  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! MOD             [ shift and go to state 63 ]


state 91

    (44) exp -> lvalue ASSIGN exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RSB             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    GT              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    LT              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    NE              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    EQ              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    LE              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    GE              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    AND             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    OR              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    SUM             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    SUB             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    MUL             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    DIV             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    MOD             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    COLON           reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    RRB             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 44 (exp -> lvalue ASSIGN exp .)

  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MUL             [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! MOD             [ shift and go to state 63 ]


state 92

    (61) exp -> LRB exp RRB .

    RSB             reduce using rule 61 (exp -> LRB exp RRB .)
    GT              reduce using rule 61 (exp -> LRB exp RRB .)
    LT              reduce using rule 61 (exp -> LRB exp RRB .)
    NE              reduce using rule 61 (exp -> LRB exp RRB .)
    EQ              reduce using rule 61 (exp -> LRB exp RRB .)
    LE              reduce using rule 61 (exp -> LRB exp RRB .)
    GE              reduce using rule 61 (exp -> LRB exp RRB .)
    AND             reduce using rule 61 (exp -> LRB exp RRB .)
    OR              reduce using rule 61 (exp -> LRB exp RRB .)
    SUM             reduce using rule 61 (exp -> LRB exp RRB .)
    SUB             reduce using rule 61 (exp -> LRB exp RRB .)
    MUL             reduce using rule 61 (exp -> LRB exp RRB .)
    DIV             reduce using rule 61 (exp -> LRB exp RRB .)
    MOD             reduce using rule 61 (exp -> LRB exp RRB .)
    COLON           reduce using rule 61 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 61 (exp -> LRB exp RRB .)
    RRB             reduce using rule 61 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 61 (exp -> LRB exp RRB .)


state 93

    (23) block -> LCB stmtlist RCB .

    $end            reduce using rule 23 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 23 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 23 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 23 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 23 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 23 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 23 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 23 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 23 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 23 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 23 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 23 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 23 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 23 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 23 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 23 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 23 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 23 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 23 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 23 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 23 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 23 (block -> LCB stmtlist RCB .)


state 94

    (24) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 24 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 24 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 24 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 24 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 24 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 24 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 24 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 24 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 24 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 24 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 24 (stmtlist -> stmtlist stmt .)


state 95

    (31) stmt -> RETURN . exp SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 112
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 96

    (32) stmt -> exp . SEMICOLON
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    SEMICOLON       shift and go to state 113
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 97

    (33) stmt -> block .

    RCB             reduce using rule 33 (stmt -> block .)
    RETURN          reduce using rule 33 (stmt -> block .)
    WHILE           reduce using rule 33 (stmt -> block .)
    ON              reduce using rule 33 (stmt -> block .)
    FOR             reduce using rule 33 (stmt -> block .)
    IF              reduce using rule 33 (stmt -> block .)
    PRINT           reduce using rule 33 (stmt -> block .)
    ID              reduce using rule 33 (stmt -> block .)
    LRB             reduce using rule 33 (stmt -> block .)
    SUB             reduce using rule 33 (stmt -> block .)
    NOT             reduce using rule 33 (stmt -> block .)
    LCB             reduce using rule 33 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 33 (stmt -> block .)
    FLOATNUMBER     reduce using rule 33 (stmt -> block .)
    TRUE            reduce using rule 33 (stmt -> block .)
    FALSE           reduce using rule 33 (stmt -> block .)
    ELSE            reduce using rule 33 (stmt -> block .)
    ELSEIF          reduce using rule 33 (stmt -> block .)
    WHERE           reduce using rule 33 (stmt -> block .)


state 98

    (34) stmt -> vardec .

    RCB             reduce using rule 34 (stmt -> vardec .)
    RETURN          reduce using rule 34 (stmt -> vardec .)
    WHILE           reduce using rule 34 (stmt -> vardec .)
    ON              reduce using rule 34 (stmt -> vardec .)
    FOR             reduce using rule 34 (stmt -> vardec .)
    IF              reduce using rule 34 (stmt -> vardec .)
    PRINT           reduce using rule 34 (stmt -> vardec .)
    ID              reduce using rule 34 (stmt -> vardec .)
    LRB             reduce using rule 34 (stmt -> vardec .)
    SUB             reduce using rule 34 (stmt -> vardec .)
    NOT             reduce using rule 34 (stmt -> vardec .)
    LCB             reduce using rule 34 (stmt -> vardec .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> vardec .)
    FLOATNUMBER     reduce using rule 34 (stmt -> vardec .)
    TRUE            reduce using rule 34 (stmt -> vardec .)
    FALSE           reduce using rule 34 (stmt -> vardec .)
    ELSE            reduce using rule 34 (stmt -> vardec .)
    ELSEIF          reduce using rule 34 (stmt -> vardec .)
    WHERE           reduce using rule 34 (stmt -> vardec .)


state 99

    (35) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 114


state 100

    (36) stmt -> ON . LRB exp RRB LCB cases RCB SEMICOLON

    LRB             shift and go to state 115


state 101

    (37) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> FOR . LRB ID IN ID RRB stmt

    LRB             shift and go to state 116


state 102

    (39) stmt -> IF . LRB exp RRB stmt elseiflist
    (40) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt

    LRB             shift and go to state 117


state 103

    (41) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 118


state 104

    (44) exp -> lvalue . ASSIGN exp
    (59) exp -> lvalue .
    (10) iddec -> lvalue .
    (11) iddec -> lvalue . ASSIGN exp

    ASSIGN          shift and go to state 119
    SEMICOLON       reduce using rule 59 (exp -> lvalue .)
    GT              reduce using rule 59 (exp -> lvalue .)
    LT              reduce using rule 59 (exp -> lvalue .)
    NE              reduce using rule 59 (exp -> lvalue .)
    EQ              reduce using rule 59 (exp -> lvalue .)
    LE              reduce using rule 59 (exp -> lvalue .)
    GE              reduce using rule 59 (exp -> lvalue .)
    AND             reduce using rule 59 (exp -> lvalue .)
    OR              reduce using rule 59 (exp -> lvalue .)
    SUM             reduce using rule 59 (exp -> lvalue .)
    SUB             reduce using rule 59 (exp -> lvalue .)
    MUL             reduce using rule 59 (exp -> lvalue .)
    DIV             reduce using rule 59 (exp -> lvalue .)
    MOD             reduce using rule 59 (exp -> lvalue .)
    COLON           reduce using rule 10 (iddec -> lvalue .)
    COMMA           reduce using rule 10 (iddec -> lvalue .)


state 105

    (21) paramdec -> ID COLON type .

    COMMA           reduce using rule 21 (paramdec -> ID COLON type .)
    RRB             reduce using rule 21 (paramdec -> ID COLON type .)


state 106

    (22) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 120


state 107

    (15) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 121

state 108

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 109

    (20) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 20 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 20 (paramdecslist -> paramdecslist COMMA paramdec .)


state 110

    (60) exp -> ID LRB explist RRB .

    RSB             reduce using rule 60 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 60 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 60 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 60 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 60 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 60 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 60 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 60 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 60 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 60 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 60 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 60 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 60 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 60 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 60 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 60 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 60 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 60 (exp -> ID LRB explist RRB .)


state 111

    (70) explist -> explist COMMA . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 122
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 112

    (31) stmt -> RETURN exp . SEMICOLON
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    SEMICOLON       shift and go to state 123
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 113

    (32) stmt -> exp SEMICOLON .

    RCB             reduce using rule 32 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 32 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 32 (stmt -> exp SEMICOLON .)
    ON              reduce using rule 32 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 32 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 32 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 32 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 32 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 32 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 32 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 32 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 32 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 32 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 32 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 32 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 32 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 32 (stmt -> exp SEMICOLON .)
    ELSEIF          reduce using rule 32 (stmt -> exp SEMICOLON .)
    WHERE           reduce using rule 32 (stmt -> exp SEMICOLON .)


state 114

    (35) stmt -> WHILE LRB . exp RRB stmt
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 124
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 115

    (36) stmt -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 125
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 116

    (37) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> FOR LRB . ID IN ID RRB stmt
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 127
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 126
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 117

    (39) stmt -> IF LRB . exp RRB stmt elseiflist
    (40) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 128
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 118

    (41) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 129


state 119

    (44) exp -> lvalue ASSIGN . exp
    (11) iddec -> lvalue ASSIGN . exp
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    lvalue                         shift and go to state 30
    exp                            shift and go to state 130
    const                          shift and go to state 32

state 120

    (22) paramdec -> ID LSB RSB COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 131

state 121

    (15) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (23) block -> . LCB stmtlist RCB

    LCB             shift and go to state 42

    block                          shift and go to state 132

state 122

    (70) explist -> explist COMMA exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RRB             reduce using rule 70 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 70 (explist -> explist COMMA exp .)
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 123

    (31) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    ON              reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 31 (stmt -> RETURN exp SEMICOLON .)


state 124

    (35) stmt -> WHILE LRB exp . RRB stmt
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RRB             shift and go to state 133
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 125

    (36) stmt -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RRB             shift and go to state 134
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 126

    (37) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    SEMICOLON       shift and go to state 135
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 127

    (38) stmt -> FOR LRB ID . IN ID RRB stmt
    (60) exp -> ID . LRB explist RRB
    (62) exp -> ID . LRB RRB
    (26) lvalue -> ID .
    (27) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 136
    LRB             shift and go to state 49
    ASSIGN          reduce using rule 26 (lvalue -> ID .)
    SEMICOLON       reduce using rule 26 (lvalue -> ID .)
    GT              reduce using rule 26 (lvalue -> ID .)
    LT              reduce using rule 26 (lvalue -> ID .)
    NE              reduce using rule 26 (lvalue -> ID .)
    EQ              reduce using rule 26 (lvalue -> ID .)
    LE              reduce using rule 26 (lvalue -> ID .)
    GE              reduce using rule 26 (lvalue -> ID .)
    AND             reduce using rule 26 (lvalue -> ID .)
    OR              reduce using rule 26 (lvalue -> ID .)
    SUM             reduce using rule 26 (lvalue -> ID .)
    SUB             reduce using rule 26 (lvalue -> ID .)
    MUL             reduce using rule 26 (lvalue -> ID .)
    DIV             reduce using rule 26 (lvalue -> ID .)
    MOD             reduce using rule 26 (lvalue -> ID .)
    LSB             shift and go to state 18


state 128

    (39) stmt -> IF LRB exp . RRB stmt elseiflist
    (40) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RRB             shift and go to state 137
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 129

    (41) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 138


state 130

    (44) exp -> lvalue ASSIGN exp .
    (11) iddec -> lvalue ASSIGN exp .
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    SEMICOLON       reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    GT              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    LT              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    NE              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    EQ              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    LE              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    GE              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    AND             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    OR              reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    SUM             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    SUB             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    MUL             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    DIV             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    MOD             reduce using rule 44 (exp -> lvalue ASSIGN exp .)
    COLON           reduce using rule 11 (iddec -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 11 (iddec -> lvalue ASSIGN exp .)

  ! GT              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! NE              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MUL             [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! MOD             [ shift and go to state 63 ]


state 131

    (22) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 22 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 22 (paramdec -> ID LSB RSB COLON type .)


state 132

    (15) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 15 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 15 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 15 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 133

    (35) stmt -> WHILE LRB exp RRB . stmt
    (31) stmt -> . RETURN exp SEMICOLON
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . WHILE LRB exp RRB stmt
    (36) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (37) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> . FOR LRB ID IN ID RRB stmt
    (39) stmt -> . IF LRB exp RRB stmt elseiflist
    (40) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (41) stmt -> . PRINT LRB ID RRB SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 102
    PRINT           shift and go to state 103
    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 139
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 104
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 134

    (36) stmt -> ON LRB exp RRB . LCB cases RCB SEMICOLON

    LCB             shift and go to state 140


state 135

    (37) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 141
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 136

    (38) stmt -> FOR LRB ID IN . ID RRB stmt

    ID              shift and go to state 142


state 137

    (39) stmt -> IF LRB exp RRB . stmt elseiflist
    (40) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (31) stmt -> . RETURN exp SEMICOLON
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . WHILE LRB exp RRB stmt
    (36) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (37) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> . FOR LRB ID IN ID RRB stmt
    (39) stmt -> . IF LRB exp RRB stmt elseiflist
    (40) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (41) stmt -> . PRINT LRB ID RRB SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 102
    PRINT           shift and go to state 103
    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 143
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 104
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 138

    (41) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 144


state 139

    (35) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    ON              reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    ELSEIF          reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)
    WHERE           reduce using rule 35 (stmt -> WHILE LRB exp RRB stmt .)


state 140

    (36) stmt -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (29) cases -> . cases case
    (30) cases -> . empty
    (71) empty -> .

    RCB             reduce using rule 71 (empty -> .)
    WHERE           reduce using rule 71 (empty -> .)

    cases                          shift and go to state 145
    empty                          shift and go to state 146

state 141

    (37) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    SEMICOLON       shift and go to state 147
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 142

    (38) stmt -> FOR LRB ID IN ID . RRB stmt

    RRB             shift and go to state 148


state 143

    (39) stmt -> IF LRB exp RRB stmt . elseiflist
    (40) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (42) elseiflist -> . elseiflist ELSEIF LRB exp RRB stmt
    (43) elseiflist -> . empty
    (71) empty -> .

    RCB             reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    ON              reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    PRINT           reduce using rule 71 (empty -> .)
    ID              reduce using rule 71 (empty -> .)
    LRB             reduce using rule 71 (empty -> .)
    SUB             reduce using rule 71 (empty -> .)
    NOT             reduce using rule 71 (empty -> .)
    LCB             reduce using rule 71 (empty -> .)
    INTEGERNUMBER   reduce using rule 71 (empty -> .)
    FLOATNUMBER     reduce using rule 71 (empty -> .)
    TRUE            reduce using rule 71 (empty -> .)
    FALSE           reduce using rule 71 (empty -> .)
    ELSE            reduce using rule 71 (empty -> .)
    ELSEIF          reduce using rule 71 (empty -> .)
    WHERE           reduce using rule 71 (empty -> .)

    elseiflist                     shift and go to state 149
    empty                          shift and go to state 150

state 144

    (41) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 41 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 145

    (36) stmt -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (29) cases -> cases . case
    (28) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 151
    WHERE           shift and go to state 153

    case                           shift and go to state 152

state 146

    (30) cases -> empty .

    RCB             reduce using rule 30 (cases -> empty .)
    WHERE           reduce using rule 30 (cases -> empty .)


state 147

    (37) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 154
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 148

    (38) stmt -> FOR LRB ID IN ID RRB . stmt
    (31) stmt -> . RETURN exp SEMICOLON
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . WHILE LRB exp RRB stmt
    (36) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (37) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> . FOR LRB ID IN ID RRB stmt
    (39) stmt -> . IF LRB exp RRB stmt elseiflist
    (40) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (41) stmt -> . PRINT LRB ID RRB SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 102
    PRINT           shift and go to state 103
    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    stmt                           shift and go to state 155
    exp                            shift and go to state 96
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 104
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 149

    (39) stmt -> IF LRB exp RRB stmt elseiflist .
    (40) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (42) elseiflist -> elseiflist . ELSEIF LRB exp RRB stmt

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    RCB             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            shift and go to state 156
    ELSEIF          shift and go to state 157

  ! ELSE            [ reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .) ]
  ! ELSEIF          [ reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist .) ]


state 150

    (43) elseiflist -> empty .

    RCB             reduce using rule 43 (elseiflist -> empty .)
    RETURN          reduce using rule 43 (elseiflist -> empty .)
    WHILE           reduce using rule 43 (elseiflist -> empty .)
    ON              reduce using rule 43 (elseiflist -> empty .)
    FOR             reduce using rule 43 (elseiflist -> empty .)
    IF              reduce using rule 43 (elseiflist -> empty .)
    PRINT           reduce using rule 43 (elseiflist -> empty .)
    ID              reduce using rule 43 (elseiflist -> empty .)
    LRB             reduce using rule 43 (elseiflist -> empty .)
    SUB             reduce using rule 43 (elseiflist -> empty .)
    NOT             reduce using rule 43 (elseiflist -> empty .)
    LCB             reduce using rule 43 (elseiflist -> empty .)
    INTEGERNUMBER   reduce using rule 43 (elseiflist -> empty .)
    FLOATNUMBER     reduce using rule 43 (elseiflist -> empty .)
    TRUE            reduce using rule 43 (elseiflist -> empty .)
    FALSE           reduce using rule 43 (elseiflist -> empty .)
    ELSE            reduce using rule 43 (elseiflist -> empty .)
    ELSEIF          reduce using rule 43 (elseiflist -> empty .)
    WHERE           reduce using rule 43 (elseiflist -> empty .)


state 151

    (36) stmt -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 158


state 152

    (29) cases -> cases case .

    RCB             reduce using rule 29 (cases -> cases case .)
    WHERE           reduce using rule 29 (cases -> cases case .)


state 153

    (28) case -> WHERE . const COLON stmtlist
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    const                          shift and go to state 159

state 154

    (37) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RRB             shift and go to state 160
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 155

    (38) stmt -> FOR LRB ID IN ID RRB stmt .

    RCB             reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    RETURN          reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHILE           reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ON              reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FOR             reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    IF              reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    PRINT           reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ID              reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LRB             reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    SUB             reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    NOT             reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LCB             reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    INTEGERNUMBER   reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FLOATNUMBER     reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    TRUE            reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FALSE           reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSE            reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSEIF          reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHERE           reduce using rule 38 (stmt -> FOR LRB ID IN ID RRB stmt .)


state 156

    (40) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (31) stmt -> . RETURN exp SEMICOLON
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . WHILE LRB exp RRB stmt
    (36) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (37) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> . FOR LRB ID IN ID RRB stmt
    (39) stmt -> . IF LRB exp RRB stmt elseiflist
    (40) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (41) stmt -> . PRINT LRB ID RRB SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 102
    PRINT           shift and go to state 103
    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 161
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 104
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 157

    (42) elseiflist -> elseiflist ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 162


state 158

    (36) stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 36 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 159

    (28) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 163


state 160

    (37) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (31) stmt -> . RETURN exp SEMICOLON
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . WHILE LRB exp RRB stmt
    (36) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (37) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> . FOR LRB ID IN ID RRB stmt
    (39) stmt -> . IF LRB exp RRB stmt elseiflist
    (40) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (41) stmt -> . PRINT LRB ID RRB SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 102
    PRINT           shift and go to state 103
    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 164
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 104
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 161

    (40) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ON              reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSEIF          reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHERE           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 162

    (42) elseiflist -> elseiflist ELSEIF LRB . exp RRB stmt
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE

    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 165
    lvalue                         shift and go to state 30
    const                          shift and go to state 32

state 163

    (28) case -> WHERE const COLON . stmtlist
    (24) stmtlist -> . stmtlist stmt
    (25) stmtlist -> . empty
    (71) empty -> .

    RETURN          reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    ON              reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    PRINT           reduce using rule 71 (empty -> .)
    ID              reduce using rule 71 (empty -> .)
    LRB             reduce using rule 71 (empty -> .)
    SUB             reduce using rule 71 (empty -> .)
    NOT             reduce using rule 71 (empty -> .)
    LCB             reduce using rule 71 (empty -> .)
    INTEGERNUMBER   reduce using rule 71 (empty -> .)
    FLOATNUMBER     reduce using rule 71 (empty -> .)
    TRUE            reduce using rule 71 (empty -> .)
    FALSE           reduce using rule 71 (empty -> .)
    RCB             reduce using rule 71 (empty -> .)
    WHERE           reduce using rule 71 (empty -> .)

    stmtlist                       shift and go to state 166
    empty                          shift and go to state 70

state 164

    (37) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 37 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 165

    (42) elseiflist -> elseiflist ELSEIF LRB exp . RRB stmt
    (45) exp -> exp . GT exp
    (46) exp -> exp . LT exp
    (47) exp -> exp . NE exp
    (48) exp -> exp . EQ exp
    (49) exp -> exp . LE exp
    (50) exp -> exp . GE exp
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (53) exp -> exp . SUM exp
    (54) exp -> exp . SUB exp
    (55) exp -> exp . MUL exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MOD exp

    RRB             shift and go to state 167
    GT              shift and go to state 51
    LT              shift and go to state 52
    NE              shift and go to state 53
    EQ              shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    MOD             shift and go to state 63


state 166

    (28) case -> WHERE const COLON stmtlist .
    (24) stmtlist -> stmtlist . stmt
    (31) stmt -> . RETURN exp SEMICOLON
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . WHILE LRB exp RRB stmt
    (36) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (37) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> . FOR LRB ID IN ID RRB stmt
    (39) stmt -> . IF LRB exp RRB stmt elseiflist
    (40) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (41) stmt -> . PRINT LRB ID RRB SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp

    RCB             reduce using rule 28 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 28 (case -> WHERE const COLON stmtlist .)
    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 102
    PRINT           shift and go to state 103
    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    const                          shift and go to state 32
    stmt                           shift and go to state 94
    exp                            shift and go to state 96
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 104
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 167

    (42) elseiflist -> elseiflist ELSEIF LRB exp RRB . stmt
    (31) stmt -> . RETURN exp SEMICOLON
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . WHILE LRB exp RRB stmt
    (36) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (37) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (38) stmt -> . FOR LRB ID IN ID RRB stmt
    (39) stmt -> . IF LRB exp RRB stmt elseiflist
    (40) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (41) stmt -> . PRINT LRB ID RRB SEMICOLON
    (44) exp -> . lvalue ASSIGN exp
    (45) exp -> . exp GT exp
    (46) exp -> . exp LT exp
    (47) exp -> . exp NE exp
    (48) exp -> . exp EQ exp
    (49) exp -> . exp LE exp
    (50) exp -> . exp GE exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . exp SUM exp
    (54) exp -> . exp SUB exp
    (55) exp -> . exp MUL exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MOD exp
    (58) exp -> . const
    (59) exp -> . lvalue
    (60) exp -> . ID LRB explist RRB
    (61) exp -> . LRB exp RRB
    (62) exp -> . ID LRB RRB
    (63) exp -> . SUB exp
    (64) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (65) const -> . INTEGERNUMBER
    (66) const -> . FLOATNUMBER
    (67) const -> . TRUE
    (68) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (10) iddec -> . lvalue
    (11) iddec -> . lvalue ASSIGN exp

    RETURN          shift and go to state 95
    WHILE           shift and go to state 99
    ON              shift and go to state 100
    FOR             shift and go to state 101
    IF              shift and go to state 102
    PRINT           shift and go to state 103
    ID              shift and go to state 28
    LRB             shift and go to state 33
    SUB             shift and go to state 31
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    stmt                           shift and go to state 168
    block                          shift and go to state 97
    vardec                         shift and go to state 98
    lvalue                         shift and go to state 104
    const                          shift and go to state 32
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 168

    (42) elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 42 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 149 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 149 resolved as shift
